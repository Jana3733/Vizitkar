package vizitkar;

import vizitkar.Vizitka;
import java.awt.EventQueue;

import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatLightLaf;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.filechooser.FileNameExtensionFilter;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.Image;

import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.FlowLayout;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JColorChooser;

import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.CardLayout;

import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;

import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;

import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.awt.event.ActionEvent;

public class App extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private PanelPanel panelPanel = new PanelPanel();
	private JPanel panelMain = new JPanel();
	private JPanel panel;
	private JButton btnLogo;
	private JPanel panelBorder;
	private PanelDesign panelDesign = new PanelDesign();
	private JComboBox comboBoxFontType;
	private JComboBox comboBoxAllignment;

	private int comboBoxTypeCislo = 0;
	private static Vizitka vizitka = new Vizitka();
	private JButton selectedButton;
	private PanelVizitka selectedPanel;
	private PanelVizitka panel_type1 = new PanelType1();
	private PanelVizitka panel_type2 = new PanelType2();
	private PanelVizitka panel_type3 = new PanelType3();
	private int style;
	private int fontSize;
	private JButton btnColorFG;
	private Color colorBG = new Color(255, 255, 255);
	private Color colorFG = new Color(255, 255, 255);
	private JComboBox comboBoxPomer;
	private int comboBoxPomerCislo = 0;
	private ImageIcon icon;
	private JButton btnRefresh;

	private boolean opened = false;
	private Vizitka openedVizitka;
	private String openedVizitkaNazov;

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					UIManager.setLookAndFeel(new FlatDarkLaf());
					App frame = new App();
					frame.setVisible(true);
					frame.setSelectedPanel(frame.panel_type1);
					frame.setTheme(frame.getComboBoxTypeCislo());

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Táto metóda spúšta App uz vytvorenej vizitky so všetkými dátami
	 * */
	public App(Vizitka vizitka) {
		this();
		zmenaTextu(vizitka.getMeno(), vizitka.getPriezvisko(),vizitka.getTitulPred(), vizitka.getTitulZa(), vizitka.getSpolocnost(), vizitka.getTelCislo(), vizitka.getEmail(), vizitka.getWeb(), vizitka.getAdresa());
		zmenaFarby(vizitka.getMenoColor(), vizitka.getSpolocnostColor(),vizitka.getTelCisloColor(), vizitka.getEmailColor(), vizitka.getWebColor(), vizitka.getAdresaColor());
		
		setAllign(Integer.parseInt(vizitka.getMenoAlign()), selectedPanel.getBtnMeno());
		setAllign(Integer.parseInt(vizitka.getSpolocnostAlign()), selectedPanel.getBtnSpolocnostName());
		setAllign(Integer.parseInt(vizitka.getTelCisloAlign()), selectedPanel.getBtnTelCislo());
		setAllign(Integer.parseInt(vizitka.getEmailAlign()), selectedPanel.getBtnEmail());
		setAllign(Integer.parseInt(vizitka.getWebAlign()), selectedPanel.getBtnWeb());
		setAllign(Integer.parseInt(vizitka.getAdresaAlign()), selectedPanel.getBtnAdresa());
		
		setFontType(Integer.parseInt(vizitka.getMenoFont()), selectedPanel.getBtnMeno());
		setFontType(Integer.parseInt(vizitka.getSpolocnostFont()), selectedPanel.getBtnSpolocnostName());
		setFontType(Integer.parseInt(vizitka.getTelCisloFont()), selectedPanel.getBtnTelCislo());
		setFontType(Integer.parseInt(vizitka.getEmailFont()), selectedPanel.getBtnEmail());
		setFontType(Integer.parseInt(vizitka.getWebFont()), selectedPanel.getBtnWeb());
		setFontType(Integer.parseInt(vizitka.getAdresaFont()), selectedPanel.getBtnAdresa());

		

		setComboBoxPomerCislo(Integer.parseInt(vizitka.getPomer()));
		setPomer();

		setColorBG(vizitka.getColorBG());
		switch (vizitka.getLogoORqr()) {
		case "0": {
			vizitka.setLogoORqr("0");
			break;
		}
		case "1": {
			vizitka.setLogoORqr("1");
			addLogo(vizitka.getLogoPath());
			break;
			
		}
		case "2": {
			vizitka.setLogoORqr("2");
			generateQR(vizitka.getQrColor());
			break;
		}};

		applyBackgroundColor(panelMain, vizitka.getColorBG());
		setTheme(Integer.parseInt(vizitka.getPanelType()));
	}
	public App() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1025, 680);
		contentPane = new JPanel();
		contentPane.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPane);

		contentPane.add(panelDesign, BorderLayout.NORTH);
		contentPane.add(panelPanel, BorderLayout.EAST);

		panelMain.setLayout(new FlowLayout());
		contentPane.add(panelMain, BorderLayout.CENTER);

		validate();
		repaint();
		// ------------------PANEL MAIN-------------------
		setForeground(new Color(0, 0, 0));
		setBackground(new Color(160, 160, 160));
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1025, 680);
		contentPane = new JPanel();
		contentPane.setBackground(new Color(160, 160, 160));
		contentPane.setBorder(new EmptyBorder(0, 0, 0, 0));

		setContentPane(contentPane);
		contentPane.setLayout(new BorderLayout(0, 0));

		panelMain = new JPanel();
		panelMain.setBackground(new Color(126, 126, 126));
		panelMain.setOpaque(false);
		panelMain.setMaximumSize(new Dimension(500, 32767));
		contentPane.add(panelMain, BorderLayout.CENTER);
		panelMain.setLayout(new FlowLayout(FlowLayout.CENTER, 0, 100));
		// ------------------PANEL DESIGN-------------------

		panelDesign = new PanelDesign();
		contentPane.add(panelDesign, BorderLayout.NORTH);
		panelDesign.getComboBoxFontType().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setFontType(panelDesign.getComboBoxFontType().getSelectedIndex(), getSelectedButton());
			}
		});
		panelDesign.getBtnColorFG().addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				setColorFG(setColor());
				setColorFGButtons(getColorFG(), getSelectedButton());
				//setDesign();
			}
		});
		panelDesign.getComboBoxAllignment().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setAllign(panelDesign.getComboBoxAllignment().getSelectedIndex(), getSelectedButton());
			}
		});
		panelDesign.getBtnBack().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				App.this.dispose();
				Start start = new Start();
				start.setVisible(true);
			}
		});

		// ------------------PANEL Panel-------------------
		panelPanel = new PanelPanel();
		contentPane.add(panelPanel, BorderLayout.EAST);
		panelPanel.getBtnLogo().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				addLogo();
			}
		});
		panelPanel.getBtnQR().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Color qr= setColor();
				vizitka.setQrColor(qr);
				try {
					generateQR(qr);
				} catch (Exception e2) {
	                JOptionPane.showMessageDialog(null, "Na vytvorenie treba zadať web! ", "Error", JOptionPane.WARNING_MESSAGE);

				}
			}
		});
		panelPanel.getBtnRefresh().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				zmenaTextu();
			}
		});

		panelPanel.getComboBoxType().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setComboBoxTypeCislo(panelPanel.getComboBoxType().getSelectedIndex());
				setTheme(getComboBoxTypeCislo());
			}
		});
		panelPanel.getBtnColorBG().addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				setColorBG(setColor());
				applyBackgroundColor(panelMain, getColorBG());
				revalidate();
				repaint();
				
			}
		});
		panelPanel.getComboBoxPomer().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setComboBoxPomerCislo(panelPanel.getComboBoxPomer().getSelectedIndex());
				setPomer();
			}
		});
		panelPanel.getBtnImport().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ImportDat importdat = new ImportDat();
				importdat.prehladavanieDat();
				App.this.dispose();
				
			}
		});
		panelPanel.getBtnExport().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				exportAsImage(panelBorder);
			}
		});
		panelPanel.getBtnPrint().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			}
		});
		panelPanel.getBtnSave().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				zmenaTextu();
				ulozenie();

			}
		});
		panelPanel.getBtnDisableLogo().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				disableLogoQR();

			}
		});
		panelPanel.getBtnDisableQR().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				disableLogoQR();

			}
		});
		////////////// VYTVORENIE VIZITKY//////////
		panelBorder = new JPanel();
		panelBorder.setBorder(new EmptyBorder(0, 10, 0, 0));
		panelBorder.setBackground(new Color(255, 255, 255));
		panelMain.add(panelBorder);
		panelBorder.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));

		setSelectedPanel(panel_type1);
		getSelectedPanel().getBtnSpolocnostName().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setSelectedButton(getSelectedPanel().getBtnSpolocnostName());
			}
		});
		getSelectedPanel().getBtnMeno().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setSelectedButton(getSelectedPanel().getBtnMeno());
			}
		});
		getSelectedPanel().getBtnEmail().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setSelectedButton(getSelectedPanel().getBtnEmail());
			}
		});
		getSelectedPanel().getBtnTelCislo().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setSelectedButton(getSelectedPanel().getBtnTelCislo());
			}
		});
		getSelectedPanel().getBtnWeb().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setSelectedButton(getSelectedPanel().getBtnWeb());
			}
		});
		getSelectedPanel().getBtnAdresa().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				setSelectedButton(getSelectedPanel().getBtnAdresa());
			}
		});
		panelPanel.getBtnPrint().addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				printComponent();
			}
		});
		setTheme(0);

	}
	/**Metóda ktorá nastaví vybranú tému a taktiež obnoví vybraný dizajn vizitky
	 * 
	 * @param cislo číslo z comboBoxu daného motívu vizitky
	 * 
	 * */
	public void setTheme(int cislo) {
		panelBorder.removeAll();
		PanelVizitka newPanel = null;
		switch (cislo) {
		case 0:
			newPanel = panel_type1;
			break;
		case 1:
			newPanel = panel_type2;
			break;
		case 2:
			newPanel = panel_type3;
			break;
		}
		
		vizitka.setPanelType(""+cislo);
		setSelectedPanel(newPanel);
		zmenaTextu();
		zmenaFarby(vizitka.getMenoColor(), vizitka.getSpolocnostColor(),vizitka.getTelCisloColor(), vizitka.getEmailColor(), vizitka.getWebColor(), vizitka.getAdresaColor());
		
		setAllign(Integer.parseInt(vizitka.getMenoAlign()), selectedPanel.getBtnMeno());
		setAllign(Integer.parseInt(vizitka.getSpolocnostAlign()), selectedPanel.getBtnSpolocnostName());
		setAllign(Integer.parseInt(vizitka.getTelCisloAlign()), selectedPanel.getBtnTelCislo());
		setAllign(Integer.parseInt(vizitka.getEmailAlign()), selectedPanel.getBtnEmail());
		setAllign(Integer.parseInt(vizitka.getWebAlign()), selectedPanel.getBtnWeb());
		setAllign(Integer.parseInt(vizitka.getAdresaAlign()), selectedPanel.getBtnAdresa());
		
		setFontType(Integer.parseInt(vizitka.getMenoFont()), selectedPanel.getBtnMeno());
		setFontType(Integer.parseInt(vizitka.getSpolocnostFont()), selectedPanel.getBtnSpolocnostName());
		setFontType(Integer.parseInt(vizitka.getTelCisloFont()), selectedPanel.getBtnTelCislo());
		setFontType(Integer.parseInt(vizitka.getEmailFont()), selectedPanel.getBtnEmail());
		setFontType(Integer.parseInt(vizitka.getWebFont()), selectedPanel.getBtnWeb());
		setFontType(Integer.parseInt(vizitka.getAdresaFont()), selectedPanel.getBtnAdresa());
		
		applyBackgroundColor(panelMain, getColorBG());
		switch (vizitka.getLogoORqr()) {
		case "0": {
			vizitka.setLogoORqr("0");
			break;
		}
		case "1": {
			vizitka.setLogoORqr("1");
			addLogo(vizitka.getLogoPath());
			break;
			
		}
		case "2": {
			vizitka.setLogoORqr("2");
			generateQR(vizitka.getQrColor());
			break;
		}};
		//setDesign();
	}

	/////////////////////////// KONIEC JFRAMU ///////////////////////////////////
	/**
	 * Metóda, ktorá printne vizitku
	 * */
	public void printComponent() {
		PrinterJob pj = PrinterJob.getPrinterJob();
		pj.setJobName("Print Component");

		pj.setPrintable(new Printable() {
			public int print(Graphics pg, PageFormat pf, int pageNum) {
				if (pageNum > 0) {
					return Printable.NO_SUCH_PAGE;
				}

				Graphics2D g2 = (Graphics2D) pg;
				g2.translate(pf.getImageableX(), pf.getImageableY());
				panelMain.printAll(g2);

				return Printable.PAGE_EXISTS;
			}
		});

		if (pj.printDialog() == false) {
			return;
		}

		try {
			pj.print();
		} catch (PrinterException ex) {
			JOptionPane.showMessageDialog(null, "Print Error: " + ex.getMessage(), "Print Error",
					JOptionPane.ERROR_MESSAGE);
		}
	}
	/**
	 * Metóda na vytvorenie QR kódu
	 * 
	 * @param qrColor farba QR kódu
	 * */
	public void generateQR(Color qrColor) {
	    String web = panelPanel.getTextFieldWeb().getText();

	    if (web.isEmpty()) {

	        vizitka.setQrColor(qrColor);
	        return;
	    }

	    try {
	        QRCodeGenerator.createQR(web, "QRCode.png", 150, vizitka.getColorBG(), qrColor);

	        vizitka.setQrColor(qrColor);
	        vizitka.setLogoORqr("2");
	        loadQR();

	    } catch (IOException e) {
	        JOptionPane.showMessageDialog(null, "Error generating QR code: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
	    }
	}
	
	public void setupActionListeners(PanelVizitka panel) {
		panel.getBtnSpolocnostName().addActionListener(e -> {
			setSelectedButton(panel.getBtnSpolocnostName());
		});

		panel.getBtnMeno().addActionListener(e -> {
			setSelectedButton(panel.getBtnMeno());
		});

		panel.getBtnEmail().addActionListener(e -> {
			setSelectedButton(panel.getBtnEmail());
		});

		panel.getBtnTelCislo().addActionListener(e -> {
			setSelectedButton(panel.getBtnTelCislo());
		});

		panel.getBtnWeb().addActionListener(e -> {
			setSelectedButton(panel.getBtnWeb());
		});

		panel.getBtnAdresa().addActionListener(e -> {
			setSelectedButton(panel.getBtnAdresa());
		});
	}

	public void setSelectedPanel(PanelVizitka selectedPanel) {
		if (this.selectedPanel != null) {
			clearActionListeners(this.selectedPanel);
		}
		this.selectedPanel = selectedPanel;
		setupActionListeners(selectedPanel);
		BorderLayout borderLayout = (BorderLayout) panel_type1.getLayout();
		panel_type1.getLblPicture().setText("");
		panelBorder.add(selectedPanel, BorderLayout.CENTER);
		panelBorder.revalidate();
		panelBorder.repaint();
	}

	public void clearActionListeners(PanelVizitka panel) {
		for (ActionListener al : panel.getBtnSpolocnostName().getActionListeners()) {
			panel.getBtnSpolocnostName().removeActionListener(al);
		}
	}
	/**
	 * Metóda na zmenu textu
	 * */
	public void zmenaTextu() {
		vizitka.setMeno(panelPanel.getTextFieldMeno().getText());
		vizitka.setPriezvisko(panelPanel.getTextFieldPriezvisko().getText());
		vizitka.setTitulPred(panelPanel.getTextFieldTitPred().getText());
		vizitka.setTitulZa(panelPanel.getTextFieldTitZa().getText());
		vizitka.setSpolocnost(panelPanel.getTextFieldSpolocnost().getText());
		vizitka.setTelCislo(panelPanel.getTextFieldTelCislo().getText());
		vizitka.setEmail(panelPanel.getTextFieldEmail().getText());
		vizitka.setWeb(panelPanel.getTextFieldWeb().getText());
		vizitka.setAdresa(panelPanel.getTextFieldAdresa().getText());
		
		selectedPanel.getBtnMeno().setText(vizitka.getTitulPred() + " " + vizitka.getMeno() + " "
				+ vizitka.getPriezvisko() + " " + vizitka.getTitulZa());
		selectedPanel.getBtnSpolocnostName().setText(vizitka.getSpolocnost());
		selectedPanel.getBtnEmail().setText(vizitka.getEmail());
		selectedPanel.getBtnWeb().setText(vizitka.getWeb());
		selectedPanel.getBtnTelCislo().setText("" + vizitka.getTelCislo());
		selectedPanel.getBtnAdresa().setText("" + vizitka.getAdresa());
	}
	/**
	 * Metóda na zmenu textu ale s parametrami (používa sa pri vykresľovaní už vytvorenej vizitky)
	 * */
	public void zmenaTextu(String meno, String priezvisko, String titulPred, String titulZa, String spolocnost,
			String telCislo, String email, String web, String adresa) {
		vizitka.setMeno(meno);
		vizitka.setPriezvisko(priezvisko);
		vizitka.setTitulPred(titulPred);
		vizitka.setTitulZa(titulZa);
		vizitka.setSpolocnost(spolocnost);
		vizitka.setTelCislo(telCislo);
		vizitka.setEmail(email);
		vizitka.setWeb(web);
		vizitka.setWeb(adresa);

		selectedPanel.getBtnMeno().setText(titulPred + " " + meno + " " + priezvisko + " " + titulZa);
		selectedPanel.getBtnSpolocnostName().setText(spolocnost);
		selectedPanel.getBtnEmail().setText(email);
		selectedPanel.getBtnWeb().setText(web);
		selectedPanel.getBtnTelCislo().setText("" + telCislo);
		selectedPanel.getBtnAdresa().setText("" + adresa);

		panelPanel.getTextFieldMeno().setText(meno);
		panelPanel.getTextFieldPriezvisko().setText(priezvisko);
		panelPanel.getTextFieldTitPred().setText(titulPred);
		panelPanel.getTextFieldTitZa().setText(titulZa);
		panelPanel.getTextFieldSpolocnost().setText(spolocnost);
		panelPanel.getTextFieldTelCislo().setText(telCislo);
		panelPanel.getTextFieldEmail().setText(email);
		panelPanel.getTextFieldWeb().setText(web);
		panelPanel.getTextFieldAdresa().setText(adresa);
		validate();
		repaint();
	}
	/**
	 * Metóda na zmenu farby s parametrami (používa sa pri vykresľovaní už vytvorenej vizitky)
	 * */
	private void zmenaFarby(Color menoColor, Color spolocnostColor, Color telCisloColor, Color emailColor,
			Color webColor, Color adresaColor) {
		vizitka.setMenoColor(menoColor);
		vizitka.setSpolocnostColor(spolocnostColor);
		vizitka.setTelCisloColor(telCisloColor);
		vizitka.setEmailColor(emailColor);
		vizitka.setWebColor(webColor);
		vizitka.setWebColor(adresaColor);

		selectedPanel.getBtnMeno().setForeground(menoColor);
		selectedPanel.getBtnSpolocnostName().setForeground(spolocnostColor);
		selectedPanel.getBtnEmail().setForeground(emailColor);
		selectedPanel.getBtnWeb().setForeground(webColor);
		selectedPanel.getBtnTelCislo().setForeground(telCisloColor);
		selectedPanel.getBtnAdresa().setForeground(adresaColor);
		validate();
		repaint();
		
	}
	/**
	 * Metóda na zmenu zarovnania
	 * @param cislo číslo z ComboBoxu Zarovnania 1-LEFT 2-CENTER 3-RIGHT
	 * @param btn zvolená časť vizitky
	 * */
	public void setAllign(int cislo, JButton btn) {
		switch (cislo) {
		case 0: {
			btn.setHorizontalAlignment(SwingConstants.LEFT);
			break;
		}
		case 1: {
			btn.setHorizontalAlignment(SwingConstants.CENTER);
			break;
		}
		case 2: {
			btn.setHorizontalAlignment(SwingConstants.RIGHT);
			break;
		}
		}
		if (btn.equals(selectedPanel.getBtnMeno())) {
			vizitka.setMenoAlign(cislo+"");
			return;
		}
		else if(btn.equals(selectedPanel.getBtnSpolocnostName())) {
			vizitka.setSpolocnostAlign(cislo+"");
			return;
		}
		else if(btn.equals(selectedPanel.getBtnEmail())) {
			vizitka.setEmailAlign(cislo+"");
			return;
		}
		else if(btn.equals(selectedPanel.getBtnWeb())) {
			vizitka.setWebAlign(cislo+"");
			return;
		}
		else if(btn.equals(selectedPanel.getBtnTelCislo())) {
			vizitka.setTelCisloAlign(cislo+"");
			return;
		}
		else if(btn.equals(selectedPanel.getBtnAdresa())) {
			vizitka.setAdresaAlign(cislo+"");
			return;
		}
	}
	/**
	 * Metóda na nastavenie farby textu danej časti vizitky
	 * @param color zvolená farba
	 * @param btn zvolená časť vizitky
	 * */
	public void setColorFGButtons(Color color, JButton btn) {
		btn.setForeground(color);
		if (btn.equals(selectedPanel.getBtnMeno())) {
			vizitka.setMenoColor(color);
			return;
		}
		else if(btn.equals(selectedPanel.getBtnSpolocnostName())) {
			vizitka.setSpolocnostColor(color);
			return;
		}
		else if(btn.equals(selectedPanel.getBtnEmail())) {
			vizitka.setEmailColor(color);
			return;
		}
		else if(btn.equals(selectedPanel.getBtnWeb())) {
			vizitka.setWebColor(color);
			return;
		}
		else if(btn.equals(selectedPanel.getBtnTelCislo())) {
			vizitka.setTelCisloColor(color);
			return;
		}
		else if(btn.equals(selectedPanel.getBtnAdresa())) {
			vizitka.setAdresaColor(color);
			return;
		}
	}
	/**
	 * Metóda na nastavenie farby pozadia
	 * 
	 * Preľadáva celý panel a všetko čo je v ňom - a mení im farbu pozadia
	 * */
	public void applyBackgroundColor(Component comp, Color color) {
		comp.setBackground(color);
		if (comp instanceof Container) {
			for (Component child : ((Container) comp).getComponents()) {
				applyBackgroundColor(child, color);
			}
		}
		
		String web = panelPanel.getTextFieldWeb().getText();

	    if (!web.isEmpty() && vizitka.getLogoORqr().equals("2")) {
	    	vizitka.setColorBG(getColorBG());
			generateQR(vizitka.getQrColor());
	    }

	}
	/**
	 * Metóda na nastavenie fontu textu danej časti vizitky
	 * @param index číslo comboBoxu zvoleného fontu
	 * @param btn zvolená časť vizitky
	 * */
	public void setFontType(int index, JButton btn) {
		if (btn == null) {
			System.out.println("Error: Button is null!");
			return;
		}
		int style = (btn.equals(getSelectedPanel().getBtnSpolocnostName())) ? Font.BOLD
				: Font.PLAIN;
		int size = (style == Font.BOLD) ? 35 : 15;

		String fontName = "";
		switch (index) {
		case 0:
			fontName = "Arial";
			break;
		case 1:
			fontName = "Calibri";
			break;
		case 2:
			fontName = "Comic Sans MS";
			break;
		case 3:
			fontName = "Georgia";
			break;
		case 4:
			fontName = "Segoe UI";
			break;
		case 5:
			fontName = "Times New Roman";
			break;
		}
		btn.setFont(new Font(fontName, style, size));

		if (btn.equals(selectedPanel.getBtnMeno())) {
			vizitka.setMenoFont(index+"");
			return;
		}
		else if(btn.equals(selectedPanel.getBtnSpolocnostName())) {
			vizitka.setSpolocnostFont(index+"");
			return;
		}
		else if(btn.equals(selectedPanel.getBtnEmail())) {
			vizitka.setEmailFont(index+"");
			return;
		}
		else if(btn.equals(selectedPanel.getBtnWeb())) {
			vizitka.setWebFont(index+"");
			return;
		}
		else if(btn.equals(selectedPanel.getBtnTelCislo())) {
			vizitka.setTelCisloFont(index+"");
			return;
		}
		else if(btn.equals(selectedPanel.getBtnAdresa())) {
			vizitka.setAdresaFont(index+"");
			return;
		}
	}

	public void actionPerformed(ActionEvent e) {
		JButton currentButton = getSelectedButton();
		if (currentButton != null) {
			setFontType(comboBoxFontType.getSelectedIndex(), currentButton);
		} else {
			System.out.println("No button is selected!");
		}
	}
	/**
	 * Nastavuje pomer Vizitky
	 * */
	public void setPomer() {
		int cislo = getComboBoxPomerCislo();
		switch (cislo) {
		case 0:
			panelBorder.setMinimumSize(new Dimension(500, 278));
			panelBorder.setMaximumSize(new Dimension(500, 278));
			panelBorder.setPreferredSize(new Dimension(500, 278));
			break;
		case 1:
			panelBorder.setMinimumSize(new Dimension(472, 306));
			panelBorder.setMaximumSize(new Dimension(472, 306));
			panelBorder.setPreferredSize(new Dimension(472, 306));
			break;
		case 2:
			panelBorder.setMinimumSize(new Dimension(500, 306));
			panelBorder.setMaximumSize(new Dimension(500, 306));
			panelBorder.setPreferredSize(new Dimension(500, 306));
			break;
		}
		panelBorder.revalidate();
		panelBorder.repaint();
		vizitka.setPomer(cislo+"");
	}
	/**
	 * Metóda na načítanie obrázku
	 * */
	public void loadLogo() {
		icon = getIcon();
		if (icon != null) {
			getSelectedPanel().getPanelPictureFrame().removeAll();
			getSelectedPanel().setLblPicture(new JLabel(icon));

			getSelectedPanel().getPanelPictureFrame().add(getSelectedPanel().getLblPicture());
			getSelectedPanel().getPanelPictureFrame().revalidate();
			getSelectedPanel().getPanelPictureFrame().repaint();
		} else {
			getSelectedPanel().getPanelPictureFrame().removeAll();
			getSelectedPanel().setLblPicture(new JLabel(""));

			getSelectedPanel().getPanelPictureFrame().add(getSelectedPanel().getLblPicture());
			getSelectedPanel().getPanelPictureFrame().revalidate();
			getSelectedPanel().getPanelPictureFrame().repaint();
		}
		
	}
	/**
	 * Metóda na načítanie a vytvorenie QR kódu
	 * */
	public void loadQR() {
		File selectedFile = new File("QRCode.png");
		try {
			setIcon(new ImageIcon(ImageIO.read(selectedFile)));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		icon =getIcon();
		if (icon != null) {
			getSelectedPanel().getPanelPictureFrame().removeAll();
			getSelectedPanel().setLblPicture(new JLabel(icon));

			getSelectedPanel().getPanelPictureFrame().add(getSelectedPanel().getLblPicture());
			getSelectedPanel().getPanelPictureFrame().revalidate();
			getSelectedPanel().getPanelPictureFrame().repaint();
		} else {
			getSelectedPanel().getPanelPictureFrame().removeAll();
			getSelectedPanel().setLblPicture(new JLabel(""));

			getSelectedPanel().getPanelPictureFrame().add(getSelectedPanel().getLblPicture());
			getSelectedPanel().getPanelPictureFrame().revalidate();
			getSelectedPanel().getPanelPictureFrame().repaint();
		}
		
	}
	
	/**
	 * Metóda na vybratie obrázku pre Logo vizitky a následne zobrazenie vo vizitke
	 * */
	public void addLogo() {
		JFileChooser fileChooser = new JFileChooser(System.getProperty("user.dir"));
		fileChooser.setDialogTitle("Select an image");
		fileChooser.setAcceptAllFileFilterUsed(false);
		FileNameExtensionFilter filter = new FileNameExtensionFilter("Image files", "png", "jpg", "jpeg", "gif");
		fileChooser.addChoosableFileFilter(filter);

		int result = fileChooser.showOpenDialog(App.this);
		if (result == JFileChooser.APPROVE_OPTION) {
			File selectedFile = fileChooser.getSelectedFile();
			try {
				setIcon(new ImageIcon(ImageIO.read(selectedFile)));
				// Resize icon if necessary
				Image image = icon.getImage().getScaledInstance(getSelectedPanel().getPanelPictureFrame().getWidth(),
						getSelectedPanel().getPanelPictureFrame().getHeight(), Image.SCALE_SMOOTH);
				icon = new ImageIcon(image);

				getSelectedPanel().getPanelPictureFrame().removeAll();
				getSelectedPanel().setLblPicture(new JLabel(icon));

				getSelectedPanel().getPanelPictureFrame().add(getSelectedPanel().getLblPicture());
				getSelectedPanel().getPanelPictureFrame().revalidate();
				getSelectedPanel().getPanelPictureFrame().repaint();

				vizitka.setLogoORqr("1");
				vizitka.setLogoPath(selectedFile.toString());
			} catch (IOException ex) {
				JOptionPane.showMessageDialog(App.this, "Error loading image: " + ex.getMessage(), "Image Load Error",
						JOptionPane.ERROR_MESSAGE);
			}
		}
	}
	/**
	 * Metóda na vybratie obrázku s už zvolenou cestou pre Logo vizitky a následne zobrazenie vo vizitke (používa sa na zobrazenie už vytvorenej vizitky)
	 * 
	 * @param filePath zvolená cesta obrázku
	 * */
	public void addLogo(String filePath) {
	    File selectedFile = new File(filePath);

	    if (!selectedFile.exists() || !selectedFile.canRead()) {
	        JOptionPane.showMessageDialog(App.this, "Súbor neexistuje alebo ho nie je možné prečítať.", "Chyba pri načítaní súboru", JOptionPane.ERROR_MESSAGE);
	        return;
	    }

	    try {
	        BufferedImage image = ImageIO.read(selectedFile);

	        if (image == null) {
	            JOptionPane.showMessageDialog(App.this, "Obrázok sa nepodarilo načítať.", "Chyba pri načítaní obrázka", JOptionPane.ERROR_MESSAGE);
	            return;
	        }

	        Image scaledImage = image.getScaledInstance(200, 200, Image.SCALE_SMOOTH);
	        ImageIcon icon = new ImageIcon(scaledImage);

	        JLabel label = new JLabel(icon);
	        getSelectedPanel().getPanelPictureFrame().removeAll();
	        getSelectedPanel().getPanelPictureFrame().add(label);
	        getSelectedPanel().getPanelPictureFrame().revalidate();
	        getSelectedPanel().getPanelPictureFrame().repaint();

	        vizitka.setLogoORqr("1");
	        vizitka.setLogoPath(filePath);
	    } catch (IOException ex) {
	        JOptionPane.showMessageDialog(App.this, "Chyba pri načítaní obrázka: " + ex.getMessage(), "Chyba pri načítaní obrázka", JOptionPane.ERROR_MESSAGE);
	    }
	}


	
	public void disableLogoQR() {
		getSelectedPanel().getPanelPictureFrame().removeAll();
		getSelectedPanel().getPanelPictureFrame().revalidate();
		getSelectedPanel().getPanelPictureFrame().repaint();
		vizitka.setLogoORqr("0");
	}
	
	/**
	 * Metóda ktorá kontroluje či už daná vizitka bola vytvorená alebo je to nový súbor
	 * */
	public void ulozenie() {
		if(isOpened()) {
			saveToCSVOpened();
			return;
		}
		else {
		  saveToCSV();
			return;
		}
		
	}
	/**
	 * Metóda, ktorá ukladá novo vytvorenú vizitku
	 * 
	 *<p> funguje tak, že najprv užívateľ vyberie kde to chce uložit. Do Data.csv uloží pod novým ID, názov súboru a cestu k súboru.</p>
	 *<p> následne uloží všetky hodnoty vizitky (vrátane dizajnu) do zvolenej cesty súboru.</p>
	 * 
	 * */
	public void saveToCSV() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save CSV File");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV files", "csv");
        fileChooser.setFileFilter(filter);
        int userSelection = fileChooser.showSaveDialog(null);
        
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            String filePath = fileChooser.getSelectedFile().getAbsolutePath();
            
            String fileName = new File(filePath).getName();
            String nazovVizitka = fileName.endsWith(".csv") ? fileName.substring(0, fileName.length() - 4) : fileName;

            if (!filePath.endsWith(".csv")) {
                filePath += ".csv";
            }

            File file = new File(filePath);
            boolean isNewFile = !file.exists();

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath, true))) {
                if (isNewFile) {
                    writer.write("Id,Nazov,Meno,Priezvisko,TitulPred,TitulZa,Spolocnost,TelCislo,Email,Web,Adresa\n");
                }

                List<String> dataRows = new ArrayList<>();

                String basicData = String.join("_", 
                    "0",
                    nazovVizitka, 
                    vizitka.getMeno()+" ",
                    vizitka.getPriezvisko()+" ",
                    vizitka.getTitulPred()+" ",
                    vizitka.getTitulZa()+" ",
                    vizitka.getSpolocnost()+" ",
                    vizitka.getTelCislo()+" ",
                    vizitka.getEmail()+" ",
                    vizitka.getWeb()+" ",
                    vizitka.getAdresa()+" "
                ); 
                dataRows.add(basicData);
                //-----------------------------------------
                String colorData = String.join("_", 
                    "1",
                    nazovVizitka, 
                    "" + vizitka.getMenoColor(), 
                    "" + vizitka.getSpolocnostColor(), 
                    "" + vizitka.getTelCisloColor(), 
                    "" + vizitka.getEmailColor(), 
                    "" + vizitka.getWebColor(), 
                    "" + vizitka.getAdresaColor()
                );
                dataRows.add(colorData);
                //-----------------------------------------
				
				  String alignmentData = String.join("_",
					  "2", 
					  nazovVizitka, 
					  "" +vizitka.getMenoAlign(),
					  "" +vizitka.getSpolocnostAlign(),
					  "" +vizitka.getTelCisloAlign(),
					  "" +vizitka.getEmailAlign(), 
					  "" +vizitka.getWebAlign(), 
					  "" + vizitka.getAdresaAlign() );
				  dataRows.add(alignmentData); 
				  //-----------------------------------------
					
				  String fontData = String.join("_",
					  "3",
					  nazovVizitka,
					  "" +vizitka.getMenoFont(), 
					  "" + vizitka.getSpolocnostFont(), 
					  "" +vizitka.getTelCisloFont(), 
					  "" + vizitka.getEmailFont(), 
					  "" +vizitka.getWebFont(), 
					  "" + vizitka.getAdresaFont() );
				  dataRows.add(fontData);
				  //-----------------------------------------
				  if(vizitka.getColorBG()==null) {
					  vizitka.setColorBG(new Color(255,255,255));
				  }
				  String colorBGData = String.join("_",
						  "4",
						  nazovVizitka,
						  "" +vizitka.getColorBG());
				  dataRows.add(colorBGData);
				  //-----------------------------------------
				  String pomerData = String.join("_",
						  "5",
						  nazovVizitka,
						  "" +vizitka.getPomer());
				  dataRows.add(pomerData);
				  //-----------------------------------------
				  String panelTypeData = String.join("_",
						  "6",
						  nazovVizitka,
						  "" +vizitka.getPanelType());
				  dataRows.add(panelTypeData);
				  //-----------------------------------------
				  String filePathLogoQR="";
				  if(vizitka.getLogoORqr().equals("1")) {
					  filePathLogoQR=vizitka.getLogoPath();
				  }
				  else if (vizitka.getLogoORqr().equals("2")) {
					  filePathLogoQR=vizitka.getQrColor().toString();
				  }
				  String logoQRData = String.join("_",
						  "7",
						  nazovVizitka,
						  "" +vizitka.getLogoORqr(),
						  ""+filePathLogoQR );
				  dataRows.add(logoQRData);
				  //-----------------------------------------
                for (String row : dataRows) {
                    writer.write(row + "\n");
                }
                //--------------ulozenie cesty do Data
                String filePathData = "Data.csv";
        		File fileData = new File(filePathData);
        		boolean isNewFileData = !fileData.exists();

        		try (BufferedWriter writerData = new BufferedWriter(new FileWriter(filePathData, true))) {
        			if (isNewFileData) {
        				writerData.write("Id,Nazov,FilePath\n");
        			}

        			int id = findMaxId(filePathData) + 1;

        			String data = String.join(",", String.valueOf(id), nazovVizitka,filePath);
        			writerData.write(data + "\n");
        		} catch (IOException e) {
        			JOptionPane.showMessageDialog(null, "Error saving to CSV: " + e.getMessage(), "Error",
        					JOptionPane.ERROR_MESSAGE);
        		}
        		validate();
        		setVisible(false);
        		contentPane.setVisible(false);
        		Start start = new Start();
        		start.setVisible(true);
                
                JOptionPane.showMessageDialog(null, "Data saved to " + filePath, "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error saving to CSV: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    		
    	
    }
	/**
	 * Metóda hľadá najvyššie ID posledného uloženého súboru
	 * */
	public int findMaxId(String filePath) throws IOException {
	    int maxId = 0;
	    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
	        String line;
	        while ((line = reader.readLine()) != null) {
	            String[] data = line.split(",");
	            if (data.length > 0 && !data[0].isEmpty()) {
	                try {
	                    int currentId = Integer.parseInt(data[0]);
	                    if (currentId > maxId) {
	                        maxId = currentId;
	                    }
	                } catch (NumberFormatException e) {
	                    System.err.println("Invalid ID: " + data[0]);
	                    continue;
	                }
	            }
	        }
	    }
	    return maxId;
	}
	/**
	 * Metóda, ktorá ukladá už vytvorenú vizitku
	 * 
	 *<p> V Data.csv sa hľadá konkrétny názov. Všetky súbory z Data ktoré sa nezhodujú s názvom uloží do ArrayListu. Keď nájde daný názov - prepíše ho a uloží do ArrayListu. Po skončení cyklu sa všetky riadky znova napíšu do vymazaného Data.csv</p>
	 *<p> V súbore danej vizitky dáta zmaže a prepíše na nové</p>
	 * 
	 * */
	public void saveToCSVOpened() {
		String filePath = "Data.csv";
		File file = new File(filePath);
		ArrayList<String> lines = new ArrayList<>();
		String inputLine;
		boolean isFirstLine = true;
		String header = "";
		String filePathVizitky = "";

		try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
			while ((inputLine = reader.readLine()) != null) {
				if (isFirstLine) {
					header = inputLine;
					lines.add(header);
					isFirstLine = false;
					continue;
				}
				String[] data = inputLine.split(",");
				if (data.length < 2) {
					System.err.println("Nesprávny formát riadku: " + inputLine);
					continue;
				}

				if (data[1].equals(getOpenedVizitkaNazov())) {
					filePathVizitky = data[2];
				}

				lines.add(inputLine);
			}
		} catch (IOException e) {
			System.err.println("Chyba pri čítaní zo súboru CSV: " + e.getMessage());
			return;
		}

		try (PrintWriter writer = new PrintWriter(new FileWriter(file))) {
			for (String line : lines) {
				writer.println(line);
			}
		} catch (IOException e) {
			System.err.println("Chyba pri zápise do súboru CSV: " + e.getMessage());
			return;
		}

		File fileVizitky = new File(filePathVizitky);

		try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileVizitky, false))) {
			writer.write("Id,Nazov,Meno,Priezvisko,TitulPred,TitulZa,Spolocnost,TelCislo,Email,Web,Adresa\n");

			String nazovVizitka = getOpenedVizitkaNazov();
			List<String> dataRows = new ArrayList<>();

			String basicData = String.join("_", 
				"0",
				nazovVizitka, 
				vizitka.getMeno() + "",
				vizitka.getPriezvisko() + "",
				vizitka.getTitulPred() + "",
				vizitka.getTitulZa() + "",
				vizitka.getSpolocnost() + "",
				vizitka.getTelCislo() + "",
				vizitka.getEmail() + "",
				vizitka.getWeb() + "",
				vizitka.getAdresa() + ""
			);
			dataRows.add(basicData);
                //-----------------------------------------
                String colorData = String.join("_", 
                    "1",
                    nazovVizitka, 
                    "" + vizitka.getMenoColor(), 
                    "" + vizitka.getSpolocnostColor(), 
                    "" + vizitka.getTelCisloColor(), 
                    "" + vizitka.getEmailColor(), 
                    "" + vizitka.getWebColor(), 
                    "" + vizitka.getAdresaColor()
                );
                dataRows.add(colorData);
                //-----------------------------------------
				
				  String alignmentData = String.join("_",
					  "2", 
					  nazovVizitka, 
					  "" +vizitka.getMenoAlign(),
					  "" +vizitka.getSpolocnostAlign(),
					  "" +vizitka.getTelCisloAlign(),
					  "" +vizitka.getEmailAlign(), 
					  "" +vizitka.getWebAlign(), 
					  "" + vizitka.getAdresaAlign() );
				  dataRows.add(alignmentData); 
				  //-----------------------------------------
					
				  String fontData = String.join("_",
					  "3",
					  nazovVizitka,
					  "" +vizitka.getMenoFont(), 
					  "" + vizitka.getSpolocnostFont(), 
					  "" +vizitka.getTelCisloFont(), 
					  "" + vizitka.getEmailFont(), 
					  "" +vizitka.getWebFont(), 
					  "" + vizitka.getAdresaFont() );
				  dataRows.add(fontData);
				  //-----------------------------------------
				  String colorBGData = String.join("_",
						  "4",
						  nazovVizitka,
						  "" +vizitka.getColorBG());
				  dataRows.add(colorBGData);
				  //-----------------------------------------
				  String pomerData = String.join("_",
						  "5",
						  nazovVizitka,
						  "" +vizitka.getPomer());
				  dataRows.add(pomerData);
				  //-----------------------------------------
				  String panelTypeData = String.join("_",
						  "6",
						  nazovVizitka,
						  "" +vizitka.getPanelType());
				  dataRows.add(panelTypeData);
				  //-----------------------------------------
				  String filePathLogoQR="";
				  if(vizitka.getLogoORqr().equals("1")) {
					  filePathLogoQR=vizitka.getLogoPath();
				  }
				  else if (vizitka.getLogoORqr().equals("2")) {
					  filePathLogoQR=vizitka.getQrColor().toString();
				  }
				  String logoQRData = String.join("_",
						  "7",
						  nazovVizitka,
						  "" +vizitka.getLogoORqr(),
						  ""+filePathLogoQR );
				  dataRows.add(logoQRData);
				  //-----------------------------------------
				  for (String row : dataRows) {
						writer.write(row + "\n");
					}
				} catch (IOException e) {
					JOptionPane.showMessageDialog(null, "Chyba pri ukladaní do CSV: " + e.getMessage(), "Chyba", JOptionPane.ERROR_MESSAGE);
					return;
				}

				// Prechod späť do hlavného okna aplikácie

				setVisible(false);
				contentPane.setVisible(false);
				Start start = new Start();
				start.setVisible(true);

				JOptionPane.showMessageDialog(null, "Údaje boli uložené do " + filePathVizitky, "Úspech", JOptionPane.INFORMATION_MESSAGE);
			}
    		
    	
    
	/**
	 * Metóda ktorá slúži na kontrolu originálneho názvu súboru
	 * 
	 * @param vizitka názov vizitky
	 * */
	public boolean readNamesFromCSV(String vizitka) {
		String filePath = "Data.csv";
		boolean isNewFile = !new File(filePath).exists();
		if (isNewFile) {
			return true;
		}
		try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
			String line;
			boolean firstLine = true;

			while ((line = reader.readLine()) != null) {
				if (firstLine) {
					firstLine = false;
					continue;
				}
				String[] data = line.split(",");
				String nazov = data[1];
				if (nazov.equals(vizitka)) {
					return false;
				}
			}
			return true;
		} catch (IOException e) {
			System.err.println("Error reading from CSV file: " + e.getMessage());
		}
		return false;
	}
	/**
	 * Metóda ktorá slúži na exportovanie vizitky ako PNG, JPG, JPEG
	 * */
	public void exportAsImage(JPanel panel) {
		BufferedImage image = new BufferedImage(panel.getWidth(), panel.getHeight(), BufferedImage.TYPE_INT_RGB);
		Graphics2D obrazok = image.createGraphics();

		panel.paint(obrazok);
		obrazok.dispose();

		JFileChooser fileChooser = new JFileChooser(System.getProperty("user.dir"));
		fileChooser.setDialogTitle("Uložiť ako");
		FileNameExtensionFilter pngFilter = new FileNameExtensionFilter("PNG files", "png");
		FileNameExtensionFilter jpgFilter = new FileNameExtensionFilter("JPEG files", "jpg", "jpeg");
		fileChooser.addChoosableFileFilter(pngFilter);
		fileChooser.addChoosableFileFilter(jpgFilter);
		fileChooser.setFileFilter(pngFilter);

		int userSelection = fileChooser.showSaveDialog(panel);
		if (userSelection == JFileChooser.APPROVE_OPTION) {
			File fileToSave = fileChooser.getSelectedFile();
			String filePath = fileToSave.getAbsolutePath();
			String ext = "png";

			if (fileChooser.getFileFilter().equals(jpgFilter)) {
				ext = "jpg";
				if (!filePath.toLowerCase().endsWith(".jpg")) {
					filePath += ".jpg";
				}
			} else if (fileChooser.getFileFilter().equals(pngFilter)) {
				if (!filePath.toLowerCase().endsWith(".png")) {
					filePath += ".png";
				}
			}

			try {
				ImageIO.write(image, ext, new File(filePath));
				JOptionPane.showMessageDialog(panel, "Obrázok bol úspešne uložený: " + filePath, "Uloženie obrázku",
						JOptionPane.INFORMATION_MESSAGE);
			} catch (IOException e) {
				JOptionPane.showMessageDialog(panel, "Chyba pri ukladaní obrázka: " + e.getMessage(), "Chyba",
						JOptionPane.ERROR_MESSAGE);
			}
		}
	}
//	////////////////////////////////////////////////////////////////////////////////

	public JButton getSelectedButton() {
		return selectedButton;
	}

	public void setSelectedButton(JButton btn) {
		if (selectedButton != btn) {
			if (selectedButton != null) {
				selectedButton.setSelected(false);
			}
			this.selectedButton = btn;
			selectedButton.setSelected(true);

		} else {
			selectedButton.setSelected(false);
			this.selectedButton = null;
		}
	}

	public int getComboBoxTypeCislo() {
		return comboBoxTypeCislo;
	}

	public void setComboBoxTypeCislo(int comboBoxTypeCislo) {
		this.comboBoxTypeCislo = comboBoxTypeCislo;
	}

	public PanelVizitka getSelectedPanel() {
		return selectedPanel;
	}

	public int getFontSize() {
		return fontSize;
	}

	public void setFontSize(int fontSize) {
		this.fontSize = fontSize;
	}

	public int getStyle() {
		return style;
	}

	public void setStyle(int style) {
		this.style = style;
	}

	public JComboBox getComboBoxFontType() {
		return comboBoxFontType;
	}

	public void setComboBoxFontType(JComboBox comboBoxFontType) {
		this.comboBoxFontType = comboBoxFontType;
	}

	public JComboBox getComboBoxAllignment() {
		return comboBoxAllignment;
	}

	public void setComboBoxAllignment(JComboBox comboBoxAllignment) {
		this.comboBoxAllignment = comboBoxAllignment;
	}

	public Color getColorBG() {
		return colorBG;
	}

	public void setColorBG(Color colorBG) {
		this.colorBG = colorBG;
	}

	public void setColorFG(Color colorFG) {
		this.colorFG = colorFG;
	}

	public Color getColorFG() {

		return colorFG;
	}

	public Color setColor() {
		Color color = JColorChooser.showDialog(App.this, "Vyber farbu", panelPanel.getPanel().getBackground());
		if (color != null) {
			return color;
		}
		return null;
	}

	public int getComboBoxPomerCislo() {
		return comboBoxPomerCislo;
	}

	public void setComboBoxPomerCislo(int comboBoxPomerCislo) {
		this.comboBoxPomerCislo = comboBoxPomerCislo;
	}

	public ImageIcon getIcon() {
		return icon;
	}

	public void setIcon(ImageIcon icon) {
		this.icon = icon;
	}

	public Vizitka getVizitka() {
		return vizitka;
	}

	public void setVizitka(Vizitka vizitka) {
		this.vizitka = vizitka;
	}

	public boolean isOpened() {
		return opened;
	}

	public void setOpened(boolean opened) {
		this.opened = opened;
	}

	public Vizitka getOpenedVizitka() {
		return openedVizitka;
	}

	public void setOpenedVizitka(Vizitka openedVizitka) {
		this.openedVizitka = openedVizitka;
	}

	public String getOpenedVizitkaNazov() {
		return openedVizitkaNazov;
	}

	public void setOpenedVizitkaNazov(String openedVizitkaNazov) {
		this.openedVizitkaNazov = openedVizitkaNazov;
	}
}
package vizitkar;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.FlowLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.filechooser.FileNameExtensionFilter;

public class ImportDat {
	
	public ImportDat(){
		
	}
	/**
	 * Táto trieda slúži na importovanie dát
	 * */
	
	/**
	 * Táto metóda slúži na prehľadávanie dát vybranej vizitky, vybraná vizitka sa spustí v triede App na jej ďalšie spracovanie
	 * 
	 * @param selectedNazov názov vizitky
	 * 
	 * 
	 * */
	public void prehladavanieDat() {
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setDialogTitle("Save CSV File");
		FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV files", "csv");
		fileChooser.setFileFilter(filter);
		int userSelection = fileChooser.showSaveDialog(null);

		if (userSelection == JFileChooser.APPROVE_OPTION) {
			String filePath = fileChooser.getSelectedFile().getAbsolutePath();

			String fileName = new File(filePath).getName();
			String nazovVizitka = fileName.endsWith(".csv") ? fileName.substring(0, fileName.length() - 4) : fileName;

			if (!filePath.endsWith(".csv")) {
				filePath += ".csv";
			}

			File file = new File(filePath);
			boolean isNewFile = !file.exists();

			Vizitka vizitka = new Vizitka();
			try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
				String line;
				boolean firstLine = true;

				while ((line = reader.readLine()) != null) {
					if (firstLine) {
						firstLine = false;
						continue;
					}

					String[] data = line.split("_", -1);
					int id = Integer.parseInt(data[0]);

					switch (id) {
					case 0:
						vizitka.setMeno(data[2]);
						vizitka.setPriezvisko(data[3]);
						vizitka.setTitulPred(data[4]);
						vizitka.setTitulZa(data[5]);
						vizitka.setSpolocnost(data[6]);
						vizitka.setTelCislo(data[7]);
						vizitka.setEmail(data[8]);
						vizitka.setWeb(data[9]);
						vizitka.setAdresa(data[10]);
						break;

					case 1:
						vizitka.setMenoColor(decodeColor(data[2]));
						vizitka.setSpolocnostColor(decodeColor(data[3]));
						vizitka.setTelCisloColor(decodeColor(data[4]));
						vizitka.setEmailColor(decodeColor(data[5]));
						vizitka.setWebColor(decodeColor(data[6]));
						vizitka.setAdresaColor(decodeColor(data[7]));
						break;
					case 2:
						vizitka.setMenoAlign(data[2]);
						vizitka.setSpolocnostAlign(data[3]);
						vizitka.setTelCisloAlign(data[4]);
						vizitka.setEmailAlign(data[5]);
						vizitka.setWebAlign(data[6]);
						vizitka.setAdresaAlign(data[7]);
						break;
					case 3:
						vizitka.setMenoFont(data[2]);
						vizitka.setSpolocnostFont(data[3]);
						vizitka.setTelCisloFont(data[4]);
						vizitka.setEmailFont(data[5]);
						vizitka.setWebFont(data[6]);
						vizitka.setAdresaFont(data[7]);
						break;
					case 4:
						vizitka.setColorBG(decodeColor(data[2]));
						break;
					case 5:
						vizitka.setPomer(data[2]);
						break;
					case 6:
						vizitka.setPanelType(data[2]);
						break;
					case 7:
						vizitka.setLogoORqr(data[2]);
						if (vizitka.getLogoORqr().equals("1")) {
							vizitka.setLogoPath(data[3]);
							break;
						} else if (vizitka.getLogoORqr().equals("2")) {
							vizitka.setQrColor(decodeColor(data[3]));
							break;
						}

					}
				}
			} catch (IOException e) {
				JOptionPane.showMessageDialog(null, "Error saving to CSV: " + e.getMessage(), "Error",
						JOptionPane.ERROR_MESSAGE);
			}
			App app = new App(vizitka);

			app.setVisible(true);
		}

	}
	/**
	 * Táto metóda slúži na prepísanie farby z dát (pretože mi inak nebralo danú farbu)
	 * 
	 * @param colorString reťazec danej farby, ktorú chceme prepísať na Color
	 * @return vracia prepísanú farbu
	 * 
	 * */
	private Color decodeColor(String colorString) {
		try {
			if (colorString == null) {
				return new Color(255, 255, 255);
			}
			Pattern pattern = Pattern.compile("java.awt.Color\\[r=(\\d+),g=(\\d+),b=(\\d+)\\]");
			Matcher matcher = pattern.matcher(colorString);

			if (matcher.find()) {
				int r = Integer.parseInt(matcher.group(1));
				int g = Integer.parseInt(matcher.group(2));
				int b = Integer.parseInt(matcher.group(3));
				return new Color(r, g, b);
			}
		} catch (Exception e) {
			System.err.println("Error decoding color: " + colorString + " - " + e.getMessage());
		}

		return Color.BLACK; // Default color in case of an error
	}
}
package vizitkar;

import java.awt.Color;
import java.awt.FlowLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import java.awt.Font;
import java.awt.Component;
import javax.swing.border.EmptyBorder;
import java.awt.Insets;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.ImageIcon;

class PanelDesign extends JPanel {
    private JComboBox<String> comboBoxFontType;
    private JButton btnColorFG;
    private JComboBox<String> comboBoxAllignment;
    private JButton btnBack;

    public PanelDesign() {
        this.setLayout(new FlowLayout(FlowLayout.LEFT));
        this.setBackground(new Color(48, 50, 52));
        
        comboBoxFontType = new JComboBox<>(new String[]{"Arial", "Calibri", "Comic Sans", "Georgia", "Segoe UI", "Times New Roman"});
        
        btnBack = new JButton("");
        btnBack.setIcon(new ImageIcon("C:\\Users\\jana3\\eclipse-workspace\\semestralka\\home.png"));
        
        btnBack.setMargin(new Insets(2, 14, 2, 30));
        btnBack.setBorder(new EmptyBorder(5, 5, 5, 5));
        btnBack.setFont(new Font("Tahoma", Font.PLAIN, 18));
        add(btnBack);
        
        JLabel label = new JLabel("Font:");
        label.setBorder(new EmptyBorder(0, 20, 0, 0));
        this.add(label);
        this.add(comboBoxFontType);

        
        btnColorFG = new JButton("Vybrať");
        this.add(new JLabel("Farba textu:"));
        this.add(btnColorFG);

        comboBoxAllignment = new JComboBox<>(new String[]{"Left", "Center", "Right"});
        this.add(new JLabel("Zarovnanie:"));
        this.add(comboBoxAllignment);
    }

	//-----------GET SET---------------
	//---------------------------------
	public JComboBox getComboBoxFontType() {
		return comboBoxFontType;
	}
	public void setComboBoxFontType(JComboBox comboBoxFontType) {
		this.comboBoxFontType = comboBoxFontType;
	}
	public JComboBox getComboBoxAllignment() {
		return comboBoxAllignment;
	}
	public void setComboBoxAllignment(JComboBox comboBoxAllignment) {
		this.comboBoxAllignment = comboBoxAllignment;
	}
	public JButton getBtnColorFG() {
		return btnColorFG;
	}
	public void setBtnColorFG(JButton btnColorFG) {
		this.btnColorFG = btnColorFG;
	}
	public JButton getBtnBack() {
		return btnBack;
	}
	public void setBtnBack(JButton btnBack) {
		this.btnBack = btnBack;
	}
}
package vizitkar;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;

public class PanelPanel extends JPanel {

	private static final long serialVersionUID = 1L;

	private JPanel contentPane;
	private JPanel panelMain = new JPanel();
	private JPanel panelBorder;
	private PanelDesign panelDesign = new PanelDesign();
	private JComboBox comboBoxFontType;
	private JComboBox comboBoxAllignment;
	
	private JPanel panelPanel;
	private JPanel panel;
	private JPanel panel_1;
	private JLabel lblNewLabel;
	
	private JTextField textFieldMeno;
	private JLabel lblNewLabel_1;
	private JTextField textFieldPriezvisko;
	private JLabel lblNewLabel_2;
	private JTextField textFieldTitPred;
	private JLabel lblNewLabel_3;
	private JTextField textFieldSpolocnost;
	private JLabel lblNewLabel_4;
	private JTextField textFieldTelCislo;
	private JLabel lblNewLabel_5;
	private JTextField textFieldEmail;
	private JTextField textFieldWeb;
	private JLabel lblNewLabel_6;
	private JLabel lblNewLabel_7;
	private JButton btnLogo;
	private JLabel lblNewLabel_8;
	private JButton btnQR;
	private JLabel lblNewLabel_9;
	private JComboBox comboBoxType;
	private JLabel lblNewLabel_15;
	private JTextField textFieldTitZa;
	private JPanel panel_2;
	private JPanel panel_6;
	private JButton btnImport;
	private JButton btnExport;
	private JButton btnSave;
	private JButton btnPrint;
	private JButton btnRefresh;
	private JLabel lblNewLabel_24;
	private JButton btnColorBG;
	private JPanel panel_3;
	private JPanel panel_4;
	private JPanel panel_5;
	private JPanel panel_7;
	private JPanel panel_8;
	private JPanel panel_9;
	private JPanel panel_10;
	private JPanel panel_11;
	private JPanel panel_12;
	private JPanel panel_13;
	private JPanel panel_14;
	private JPanel panel_15;
	private JPanel panel_16;
	private JPanel panel_21;
	private JPanel panel_Adresa;
	private JLabel lblNewLabel_13;
	private JComboBox comboBoxPomer;
	private JLabel lblNewLabel_Adresa;
	private JTextField textFieldAdresa;
	private JButton btnDisableLogo;
	private JButton btnDisableQR;
	
    public PanelPanel() {
		setBorder(new EmptyBorder(10, 0, 0, 0));
		setSize(new Dimension(500, 0));
		setMinimumSize(new Dimension(500, 10));
		setLayout(new BorderLayout(0, 0));

		panel = new JPanel();
		panel.setBorder(new EmptyBorder(0, 20, 10, 20));
		panel.setForeground(new Color(0, 0, 0));
		add(panel);
		panel.setLayout(new GridLayout(0, 1, 0, 5));

		panel_4 = new JPanel();
		panel.add(panel_4);
		GridBagLayout gbl_panel_4 = new GridBagLayout();
		gbl_panel_4.columnWidths = new int[] { 100, 200, 0 };
		gbl_panel_4.rowHeights = new int[] { 32, 0 };
		gbl_panel_4.columnWeights = new double[] { 0.0, 0.0, Double.MIN_VALUE };
		gbl_panel_4.rowWeights = new double[] { 0.0, Double.MIN_VALUE };
		panel_4.setLayout(gbl_panel_4);

		lblNewLabel = new JLabel("Meno");
		GridBagConstraints gbc_lblNewLabel = new GridBagConstraints();
		gbc_lblNewLabel.fill = GridBagConstraints.BOTH;
		gbc_lblNewLabel.insets = new Insets(0, 0, 0, 5);
		gbc_lblNewLabel.gridx = 0;
		gbc_lblNewLabel.gridy = 0;
		panel_4.add(lblNewLabel, gbc_lblNewLabel);
		lblNewLabel.setHorizontalAlignment(SwingConstants.LEFT);

		textFieldMeno = new JTextField();
		GridBagConstraints gbc_textFieldMeno = new GridBagConstraints();
		gbc_textFieldMeno.fill = GridBagConstraints.BOTH;
		gbc_textFieldMeno.gridx = 1;
		gbc_textFieldMeno.gridy = 0;
		panel_4.add(textFieldMeno, gbc_textFieldMeno);
		textFieldMeno.setColumns(10);

		panel_5 = new JPanel();
		panel.add(panel_5);
		GridBagLayout gbl_panel_5 = new GridBagLayout();
		gbl_panel_5.columnWidths = new int[] { 100, 200, 0 };
		gbl_panel_5.rowHeights = new int[] { 32, 0 };
		gbl_panel_5.columnWeights = new double[] { 0.0, 0.0, Double.MIN_VALUE };
		gbl_panel_5.rowWeights = new double[] { 0.0, Double.MIN_VALUE };
		panel_5.setLayout(gbl_panel_5);

		lblNewLabel_1 = new JLabel("Priezvisko");
		GridBagConstraints gbc_lblNewLabel_1 = new GridBagConstraints();
		gbc_lblNewLabel_1.fill = GridBagConstraints.BOTH;
		gbc_lblNewLabel_1.insets = new Insets(0, 0, 0, 5);
		gbc_lblNewLabel_1.gridx = 0;
		gbc_lblNewLabel_1.gridy = 0;
		panel_5.add(lblNewLabel_1, gbc_lblNewLabel_1);

		textFieldPriezvisko = new JTextField();
		GridBagConstraints gbc_textFieldPriezvisko = new GridBagConstraints();
		gbc_textFieldPriezvisko.fill = GridBagConstraints.BOTH;
		gbc_textFieldPriezvisko.gridx = 1;
		gbc_textFieldPriezvisko.gridy = 0;
		panel_5.add(textFieldPriezvisko, gbc_textFieldPriezvisko);
		textFieldPriezvisko.setColumns(10);

		panel_7 = new JPanel();
		panel.add(panel_7);
		GridBagLayout gbl_panel_7 = new GridBagLayout();
		gbl_panel_7.columnWidths = new int[] { 100, 200, 0 };
		gbl_panel_7.rowHeights = new int[] { 32, 0 };
		gbl_panel_7.columnWeights = new double[] { 0.0, 0.0, Double.MIN_VALUE };
		gbl_panel_7.rowWeights = new double[] { 0.0, Double.MIN_VALUE };
		panel_7.setLayout(gbl_panel_7);

		lblNewLabel_2 = new JLabel("Titul pred");
		GridBagConstraints gbc_lblNewLabel_2 = new GridBagConstraints();
		gbc_lblNewLabel_2.fill = GridBagConstraints.BOTH;
		gbc_lblNewLabel_2.insets = new Insets(0, 0, 0, 5);
		gbc_lblNewLabel_2.gridx = 0;
		gbc_lblNewLabel_2.gridy = 0;
		panel_7.add(lblNewLabel_2, gbc_lblNewLabel_2);

		textFieldTitPred = new JTextField();
		GridBagConstraints gbc_textFieldTitPred = new GridBagConstraints();
		gbc_textFieldTitPred.fill = GridBagConstraints.BOTH;
		gbc_textFieldTitPred.gridx = 1;
		gbc_textFieldTitPred.gridy = 0;
		panel_7.add(textFieldTitPred, gbc_textFieldTitPred);
		textFieldTitPred.setColumns(10);

		panel_8 = new JPanel();
		panel.add(panel_8);
		GridBagLayout gbl_panel_8 = new GridBagLayout();
		gbl_panel_8.columnWidths = new int[] { 100, 200, 0 };
		gbl_panel_8.rowHeights = new int[] { 32, 0 };
		gbl_panel_8.columnWeights = new double[] { 0.0, 0.0, Double.MIN_VALUE };
		gbl_panel_8.rowWeights = new double[] { 0.0, Double.MIN_VALUE };
		panel_8.setLayout(gbl_panel_8);

		lblNewLabel_15 = new JLabel("Titul za");
		GridBagConstraints gbc_lblNewLabel_15 = new GridBagConstraints();
		gbc_lblNewLabel_15.fill = GridBagConstraints.BOTH;
		gbc_lblNewLabel_15.insets = new Insets(0, 0, 0, 5);
		gbc_lblNewLabel_15.gridx = 0;
		gbc_lblNewLabel_15.gridy = 0;
		panel_8.add(lblNewLabel_15, gbc_lblNewLabel_15);

		textFieldTitZa = new JTextField();
		GridBagConstraints gbc_textFieldTitZa = new GridBagConstraints();
		gbc_textFieldTitZa.fill = GridBagConstraints.BOTH;
		gbc_textFieldTitZa.gridx = 1;
		gbc_textFieldTitZa.gridy = 0;
		panel_8.add(textFieldTitZa, gbc_textFieldTitZa);
		textFieldTitZa.setColumns(10);

		panel_9 = new JPanel();
		panel.add(panel_9);
		GridBagLayout gbl_panel_9 = new GridBagLayout();
		gbl_panel_9.columnWidths = new int[] { 100, 200, 0 };
		gbl_panel_9.rowHeights = new int[] { 32, 0 };
		gbl_panel_9.columnWeights = new double[] { 0.0, 0.0, Double.MIN_VALUE };
		gbl_panel_9.rowWeights = new double[] { 0.0, Double.MIN_VALUE };
		panel_9.setLayout(gbl_panel_9);

		lblNewLabel_3 = new JLabel("Spoločnosť");
		GridBagConstraints gbc_lblNewLabel_3 = new GridBagConstraints();
		gbc_lblNewLabel_3.fill = GridBagConstraints.BOTH;
		gbc_lblNewLabel_3.insets = new Insets(0, 0, 0, 5);
		gbc_lblNewLabel_3.gridx = 0;
		gbc_lblNewLabel_3.gridy = 0;
		panel_9.add(lblNewLabel_3, gbc_lblNewLabel_3);

		textFieldSpolocnost = new JTextField();
		GridBagConstraints gbc_textFieldSpolocnost = new GridBagConstraints();
		gbc_textFieldSpolocnost.fill = GridBagConstraints.BOTH;
		gbc_textFieldSpolocnost.gridx = 1;
		gbc_textFieldSpolocnost.gridy = 0;
		panel_9.add(textFieldSpolocnost, gbc_textFieldSpolocnost);
		textFieldSpolocnost.setColumns(10);
		
		////////////////////////////////////////////////
		panel_Adresa = new JPanel();
		panel.add(panel_Adresa);
		GridBagLayout gbl_panel_Adresa = new GridBagLayout();
		gbl_panel_Adresa.columnWidths = new int[] { 100, 200, 0 };
		gbl_panel_Adresa.rowHeights = new int[] { 32, 0 };
		gbl_panel_Adresa.columnWeights = new double[] { 0.0, 0.0, Double.MIN_VALUE };
		gbl_panel_Adresa.rowWeights = new double[] { 0.0, Double.MIN_VALUE };
		panel_Adresa.setLayout(gbl_panel_Adresa);

		lblNewLabel_Adresa = new JLabel("Adresa");
		lblNewLabel_Adresa.setHorizontalAlignment(SwingConstants.LEFT);
		GridBagConstraints gbc_lblNewLabel_Adresa = new GridBagConstraints();
		gbc_lblNewLabel_Adresa.anchor = GridBagConstraints.WEST;
		panel_Adresa.add(lblNewLabel_Adresa, gbc_lblNewLabel_Adresa);
		
		textFieldAdresa = new JTextField();
		GridBagConstraints gbc_textFieldAdresa = new GridBagConstraints();
		gbc_textFieldAdresa.fill = GridBagConstraints.BOTH;
		gbc_textFieldAdresa.gridx = 1;
		gbc_textFieldAdresa.gridy = 0;
		panel_Adresa.add(textFieldAdresa, gbc_textFieldAdresa);
		textFieldAdresa.setColumns(10);
		///////////////////////////////////////////////
		

		panel_10 = new JPanel();
		panel.add(panel_10);
		GridBagLayout gbl_panel_10 = new GridBagLayout();
		gbl_panel_10.columnWidths = new int[] { 100, 200, 0 };
		gbl_panel_10.rowHeights = new int[] { 32, 0 };
		gbl_panel_10.columnWeights = new double[] { 0.0, 0.0, Double.MIN_VALUE };
		gbl_panel_10.rowWeights = new double[] { 0.0, Double.MIN_VALUE };
		panel_10.setLayout(gbl_panel_10);

		lblNewLabel_4 = new JLabel("Tel. číslo");
		GridBagConstraints gbc_lblNewLabel_4 = new GridBagConstraints();
		gbc_lblNewLabel_4.fill = GridBagConstraints.BOTH;
		gbc_lblNewLabel_4.insets = new Insets(0, 0, 0, 5);
		gbc_lblNewLabel_4.gridx = 0;
		gbc_lblNewLabel_4.gridy = 0;
		panel_10.add(lblNewLabel_4, gbc_lblNewLabel_4);

		textFieldTelCislo = new JTextField();
		GridBagConstraints gbc_textFieldTelCislo = new GridBagConstraints();
		gbc_textFieldTelCislo.fill = GridBagConstraints.BOTH;
		gbc_textFieldTelCislo.gridx = 1;
		gbc_textFieldTelCislo.gridy = 0;
		panel_10.add(textFieldTelCislo, gbc_textFieldTelCislo);
		textFieldTelCislo.setColumns(10);

		panel_11 = new JPanel();
		panel.add(panel_11);
		GridBagLayout gbl_panel_11 = new GridBagLayout();
		gbl_panel_11.columnWidths = new int[] { 100, 200, 0 };
		gbl_panel_11.rowHeights = new int[] { 32, 0 };
		gbl_panel_11.columnWeights = new double[] { 0.0, 0.0, Double.MIN_VALUE };
		gbl_panel_11.rowWeights = new double[] { 0.0, Double.MIN_VALUE };
		panel_11.setLayout(gbl_panel_11);

		lblNewLabel_5 = new JLabel("E-mail");
		GridBagConstraints gbc_lblNewLabel_5 = new GridBagConstraints();
		gbc_lblNewLabel_5.fill = GridBagConstraints.BOTH;
		gbc_lblNewLabel_5.insets = new Insets(0, 0, 0, 5);
		gbc_lblNewLabel_5.gridx = 0;
		gbc_lblNewLabel_5.gridy = 0;
		panel_11.add(lblNewLabel_5, gbc_lblNewLabel_5);

		textFieldEmail = new JTextField();
		GridBagConstraints gbc_textFieldEmail = new GridBagConstraints();
		gbc_textFieldEmail.fill = GridBagConstraints.BOTH;
		gbc_textFieldEmail.gridx = 1;
		gbc_textFieldEmail.gridy = 0;
		panel_11.add(textFieldEmail, gbc_textFieldEmail);
		textFieldEmail.setColumns(10);

		panel_12 = new JPanel();
		panel.add(panel_12);
		GridBagLayout gbl_panel_12 = new GridBagLayout();
		gbl_panel_12.columnWidths = new int[] { 100, 200, 0 };
		gbl_panel_12.rowHeights = new int[] { 32, 0 };
		gbl_panel_12.columnWeights = new double[] { 0.0, 0.0, Double.MIN_VALUE };
		gbl_panel_12.rowWeights = new double[] { 0.0, Double.MIN_VALUE };
		panel_12.setLayout(gbl_panel_12);

		lblNewLabel_6 = new JLabel("Web");
		GridBagConstraints gbc_lblNewLabel_6 = new GridBagConstraints();
		gbc_lblNewLabel_6.fill = GridBagConstraints.BOTH;
		gbc_lblNewLabel_6.insets = new Insets(0, 0, 0, 5);
		gbc_lblNewLabel_6.gridx = 0;
		gbc_lblNewLabel_6.gridy = 0;
		panel_12.add(lblNewLabel_6, gbc_lblNewLabel_6);

		textFieldWeb = new JTextField();
		GridBagConstraints gbc_textFieldWeb = new GridBagConstraints();
		gbc_textFieldWeb.fill = GridBagConstraints.BOTH;
		gbc_textFieldWeb.gridx = 1;
		gbc_textFieldWeb.gridy = 0;
		panel_12.add(textFieldWeb, gbc_textFieldWeb);
		textFieldWeb.setColumns(10);

		panel_14 = new JPanel();
		GridBagConstraints gbc_panel_14 = new GridBagConstraints();
		gbc_panel_14.insets = new Insets(0, 0, 5, 0);
		gbc_panel_14.gridx = 0;
		gbc_panel_14.gridy = 9;
		panel.add(panel_14, gbc_panel_14);
		GridBagLayout gbl_panel_14 = new GridBagLayout();
		gbl_panel_14.columnWidths = new int[] { 100, 160, 40, 0 };
		gbl_panel_14.rowHeights = new int[] { 32, 0 };
		gbl_panel_14.columnWeights = new double[] { 0.0, 0.0, 0.0, Double.MIN_VALUE };
		gbl_panel_14.rowWeights = new double[] { 0.0, Double.MIN_VALUE };
		panel_14.setLayout(gbl_panel_14);

		lblNewLabel_7 = new JLabel("Logo");
		GridBagConstraints gbc_lblNewLabel_7 = new GridBagConstraints();
		gbc_lblNewLabel_7.fill = GridBagConstraints.BOTH;
		gbc_lblNewLabel_7.insets = new Insets(0, 0, 0, 5);
		gbc_lblNewLabel_7.gridx = 0;
		gbc_lblNewLabel_7.gridy = 0;
		panel_14.add(lblNewLabel_7, gbc_lblNewLabel_7);

		btnLogo = new JButton("Nahrať");
		GridBagConstraints gbc_btnLogo = new GridBagConstraints();
		gbc_btnLogo.fill = GridBagConstraints.BOTH;
		gbc_btnLogo.insets = new Insets(0, 0, 0, 5);
		gbc_btnLogo.gridx = 1;
		gbc_btnLogo.gridy = 0;
		panel_14.add(btnLogo, gbc_btnLogo);

		btnDisableLogo = new JButton("x");
		GridBagConstraints gbc_btnDisablePicture_1 = new GridBagConstraints();
		gbc_btnDisablePicture_1.fill = GridBagConstraints.BOTH;
		gbc_btnDisablePicture_1.gridx = 2;
		gbc_btnDisablePicture_1.gridy = 0;
		panel_14.add(btnDisableLogo, gbc_btnDisablePicture_1);

		panel_13 = new JPanel();
		GridBagConstraints gbc_panel_13 = new GridBagConstraints();
		gbc_panel_13.insets = new Insets(0, 0, 5, 0);
		gbc_panel_13.gridx = 0;
		gbc_panel_13.gridy = 10;
		panel.add(panel_13, gbc_panel_13);
		panel_13.setBorder(new EmptyBorder(0, 0, 5, 0));
		GridBagLayout gbl_panel_13 = new GridBagLayout();
		gbl_panel_13.columnWidths = new int[] { 100, 160, 40, 0 };
		gbl_panel_13.rowHeights = new int[] { 32, 0 };
		gbl_panel_13.columnWeights = new double[] { 0.0, 0.0, 0.0, Double.MIN_VALUE };
		gbl_panel_13.rowWeights = new double[] { 0.0, Double.MIN_VALUE };
		panel_13.setLayout(gbl_panel_13);

		lblNewLabel_8 = new JLabel("QR kód");
		GridBagConstraints gbc_lblNewLabel_8 = new GridBagConstraints();
		gbc_lblNewLabel_8.fill = GridBagConstraints.BOTH;
		gbc_lblNewLabel_8.insets = new Insets(0, 0, 0, 5);
		gbc_lblNewLabel_8.gridx = 0;
		gbc_lblNewLabel_8.gridy = 0;
		panel_13.add(lblNewLabel_8, gbc_lblNewLabel_8);

		btnQR = new JButton("Vytvoriť");
		GridBagConstraints gbc_btnQR = new GridBagConstraints();
		gbc_btnQR.fill = GridBagConstraints.BOTH;
		gbc_btnQR.insets = new Insets(0, 0, 0, 5);
		gbc_btnQR.gridx = 1;
		gbc_btnQR.gridy = 0;
		panel_13.add(btnQR, gbc_btnQR);

		btnDisableQR = new JButton("x");
		GridBagConstraints gbc_btnDisablePicture = new GridBagConstraints();
		gbc_btnDisablePicture.fill = GridBagConstraints.BOTH;
		gbc_btnDisablePicture.gridx = 2;
		gbc_btnDisablePicture.gridy = 0;
		panel_13.add(btnDisableQR, gbc_btnDisablePicture);

		panel_3 = new JPanel();
		panel.add(panel_3);
		panel_3.setLayout(new GridLayout(0, 1, 0, 0));

		btnRefresh = new JButton("Refresh");
		btnRefresh.setBackground(new Color(0, 64, 128));
		panel_3.add(btnRefresh);
		

		panel_1 = new JPanel();
		add(panel_1, BorderLayout.SOUTH);
		panel_1.setLayout(new BorderLayout(0, 0));

		panel_2 = new JPanel();
		panel_2.setBackground(new Color(56, 58, 61));
		panel_2.setBorder(new EmptyBorder(10, 20, 10, 20));
		panel_1.add(panel_2, BorderLayout.CENTER);
		panel_2.setLayout(new GridLayout(0, 1, 0, 5));

		panel_15 = new JPanel();
		panel_15.setBackground(new Color(56, 58, 61));
		panel_2.add(panel_15);
		GridBagLayout gbl_panel_15 = new GridBagLayout();
		gbl_panel_15.columnWidths = new int[] { 100, 100, 50 };
		gbl_panel_15.rowHeights = new int[] { 32, 0 };
		gbl_panel_15.columnWeights = new double[] { 0.0, 0.0, Double.MIN_VALUE };
		gbl_panel_15.rowWeights = new double[] { 0.0, Double.MIN_VALUE };
		panel_15.setLayout(gbl_panel_15);

		lblNewLabel_9 = new JLabel("Typ rozpoloženia");
		lblNewLabel_9.setHorizontalAlignment(SwingConstants.LEFT);
		GridBagConstraints gbc_lblNewLabel_9 = new GridBagConstraints();
		gbc_lblNewLabel_9.fill = GridBagConstraints.BOTH;
		gbc_lblNewLabel_9.insets = new Insets(0, 0, 0, 5);
		gbc_lblNewLabel_9.gridx = 0;
		gbc_lblNewLabel_9.gridy = 0;
		panel_15.add(lblNewLabel_9, gbc_lblNewLabel_9);

		comboBoxType = new JComboBox();
		
		GridBagConstraints gbc_comboBoxType = new GridBagConstraints();
		gbc_comboBoxType.fill = GridBagConstraints.BOTH;
		gbc_comboBoxType.gridx = 1;
		gbc_comboBoxType.gridy = 0;
		panel_15.add(comboBoxType, gbc_comboBoxType);
		comboBoxType.setModel(new DefaultComboBoxModel(new String[] { "1", "2", "3" }));

		panel_16 = new JPanel();
		panel_16.setBackground(new Color(56, 58, 61));
		panel_2.add(panel_16);
		GridBagLayout gbl_panel_16 = new GridBagLayout();
		gbl_panel_16.columnWidths = new int[] { 100, 100, 50 };
		gbl_panel_16.rowHeights = new int[] { 32, 0 };
		gbl_panel_16.columnWeights = new double[] { 0.0, 0.0, Double.MIN_VALUE };
		gbl_panel_16.rowWeights = new double[] { 0.0, Double.MIN_VALUE };
		panel_16.setLayout(gbl_panel_16);

		lblNewLabel_24 = new JLabel("Farba pozadia");
		GridBagConstraints gbc_lblNewLabel_24 = new GridBagConstraints();
		gbc_lblNewLabel_24.fill = GridBagConstraints.BOTH;
		gbc_lblNewLabel_24.insets = new Insets(0, 0, 0, 5);
		gbc_lblNewLabel_24.gridx = 0;
		gbc_lblNewLabel_24.gridy = 0;
		panel_16.add(lblNewLabel_24, gbc_lblNewLabel_24);

		btnColorBG = new JButton("Vybrať");
		
		GridBagConstraints gbc_btnColorBG = new GridBagConstraints();
		gbc_btnColorBG.fill = GridBagConstraints.BOTH;
		gbc_btnColorBG.gridx = 1;
		gbc_btnColorBG.gridy = 0;
		panel_16.add(btnColorBG, gbc_btnColorBG);

		panel_21 = new JPanel();
		panel_21.setBackground(new Color(56, 58, 61));
		panel_2.add(panel_21);
		GridBagLayout gbl_panel_21 = new GridBagLayout();
		gbl_panel_21.columnWidths = new int[] { 100, 100, 50 };
		gbl_panel_21.rowHeights = new int[] { 32, 0 };
		gbl_panel_21.columnWeights = new double[] { 0.0, 0.0, Double.MIN_VALUE };
		gbl_panel_21.rowWeights = new double[] { 0.0, Double.MIN_VALUE };
		panel_21.setLayout(gbl_panel_21);

		lblNewLabel_13 = new JLabel("Pomer");
		GridBagConstraints gbc_lblNewLabel_13 = new GridBagConstraints();
		gbc_lblNewLabel_13.fill = GridBagConstraints.BOTH;
		gbc_lblNewLabel_13.insets = new Insets(0, 0, 0, 5);
		gbc_lblNewLabel_13.gridx = 0;
		gbc_lblNewLabel_13.gridy = 0;
		panel_21.add(lblNewLabel_13, gbc_lblNewLabel_13);

		comboBoxPomer = new JComboBox();
		comboBoxPomer.setModel(new DefaultComboBoxModel(new String[] { "90 x 50 mm", "85 x 55 mm", "90 x 55 mm" }));
		GridBagConstraints gbc_comboBoxPomer = new GridBagConstraints();
		gbc_comboBoxPomer.fill = GridBagConstraints.BOTH;
		gbc_comboBoxPomer.gridx = 1;
		gbc_comboBoxPomer.gridy = 0;
		panel_21.add(comboBoxPomer, gbc_comboBoxPomer);

		panel_6 = new JPanel();
		panel_6.setBackground(new Color(47, 49, 51));
		panel_1.add(panel_6, BorderLayout.SOUTH);

		btnImport = new JButton("Import");
		btnImport.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			}
		});
		panel_6.add(btnImport);

		btnExport = new JButton("Export");
		panel_6.add(btnExport);

		btnPrint = new JButton("Print");
		panel_6.add(btnPrint);

		btnSave = new JButton("Save");
		panel_6.add(btnSave);
	}
	//-----------GET SET---------------
	//---------------------------------
	public JButton getBtnLogo() {
		return btnLogo;
	}
	public void setBtnLogo(JButton btnLogo) {
		this.btnLogo = btnLogo;
	}
	public JComboBox getComboBoxType() {
		return comboBoxType;
	}
	public void setComboBoxType(JComboBox comboBoxType) {
		this.comboBoxType = comboBoxType;
	}
	public JButton getBtnRefresh() {
		return btnRefresh;
	}
	public void setBtnRefresh(JButton btnRefresh) {
		this.btnRefresh = btnRefresh;
	}
	public JButton getBtnColorBG() {
		return btnColorBG;
	}
	public void setBtnColorBG(JButton btnColorBG) {
		this.btnColorBG = btnColorBG;
	}
	public JComboBox getComboBoxPomer() {
		return comboBoxPomer;
	}
	public void setComboBoxPomer(JComboBox comboBoxPomer) {
		this.comboBoxPomer = comboBoxPomer;
	}
	public JTextField getTextFieldMeno() {
		return textFieldMeno;
	}
	public void setTextFieldMeno(JTextField textFieldMeno) {
		this.textFieldMeno = textFieldMeno;
	}
	public JButton getBtnQR() {
		return btnQR;
	}
	public void setBtnQR(JButton btnQR) {
		this.btnQR = btnQR;
	}
	public JTextField getTextFieldPriezvisko() {
		return textFieldPriezvisko;
	}
	public void setTextFieldPriezvisko(JTextField textFieldPriezvisko) {
		this.textFieldPriezvisko = textFieldPriezvisko;
	}
	public JTextField getTextFieldTitPred() {
		return textFieldTitPred;
	}
	public void setTextFieldTitPred(JTextField textFieldTitPred) {
		this.textFieldTitPred = textFieldTitPred;
	}
	public JTextField getTextFieldSpolocnost() {
		return textFieldSpolocnost;
	}
	public void setTextFieldSpolocnost(JTextField textFieldSpolocnost) {
		this.textFieldSpolocnost = textFieldSpolocnost;
	}
	public JTextField getTextFieldTelCislo() {
		return textFieldTelCislo;
	}
	public void setTextFieldTelCislo(JTextField textFieldTelCislo) {
		this.textFieldTelCislo = textFieldTelCislo;
	}
	public JTextField getTextFieldEmail() {
		return textFieldEmail;
	}
	public void setTextFieldEmail(JTextField textFieldEmail) {
		this.textFieldEmail = textFieldEmail;
	}
	public JTextField getTextFieldWeb() {
		return textFieldWeb;
	}
	public void setTextFieldWeb(JTextField textFieldWeb) {
		this.textFieldWeb = textFieldWeb;
	}
	public JTextField getTextFieldTitZa() {
		return textFieldTitZa;
	}
	public void setTextFieldTitZa(JTextField textFieldTitZa) {
		this.textFieldTitZa = textFieldTitZa;
	}

	public JButton getBtnImport() {
		return btnImport;
	}
	public void setBtnImport(JButton btnImport) {
		this.btnImport = btnImport;
	}
	public JButton getBtnExport() {
		return btnExport;
	}
	public void setBtnExport(JButton btnExport) {
		this.btnExport = btnExport;
	}
	public JButton getBtnSave() {
		return btnSave;
	}
	public void setBtnSave(JButton btnSave) {
		this.btnSave = btnSave;
	}
	public JButton getBtnPrint() {
		return btnPrint;
	}
	public void setBtnPrint(JButton btnPrint) {
		this.btnPrint = btnPrint;
	}
	public JPanel getPanel() {
		return panel;
	}
	public void setPanel(JPanel panel) {
		this.panel = panel;
	}
	public JTextField getTextFieldAdresa() {
		return textFieldAdresa;
	}
	public void setTextFieldAdresa(JTextField textFieldAdresa) {
		this.textFieldAdresa = textFieldAdresa;
	}
	public JButton getBtnDisableLogo() {
		return btnDisableLogo;
	}
	public void setBtnDisableLogo(JButton btnDisableLogo) {
		this.btnDisableLogo = btnDisableLogo;
	}
	public JButton getBtnDisableQR() {
		return btnDisableQR;
	}
	public void setBtnDisableQR(JButton btnDisableQR) {
		this.btnDisableQR = btnDisableQR;
	}
}

package vizitkar;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Insets;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;

public class PanelType1 extends PanelVizitka {

	private static final long serialVersionUID = 1L;
	public PanelType1() { 
		int fontSmall=15;
		int fontBig=35;
		setPreferredSize(new Dimension(450, 278));
		setBackground(new Color(255, 255, 255));
		setMinimumSize(new Dimension(450, 278));
		setMaximumSize(new Dimension(450, 278));
		setLayout(new BorderLayout(0, 0));

		JPanel panelSpolocnost = new JPanel();
		panelSpolocnost.setBorder(null);
		add(panelSpolocnost, BorderLayout.NORTH);
		panelSpolocnost.setBackground(new Color(255, 255, 255));
		panelSpolocnost.setLayout(new GridLayout(0, 1, 0, 0));

		btnSpolocnostName = new JButton("Spoločnosť s.r.o.");
		btnSpolocnostName.setBorder(new EmptyBorder(10, 10, 10, 10));
		btnSpolocnostName.setMargin(new Insets(10, 14, 2, 14));
		btnSpolocnostName.setForeground(new Color(0, 0, 0));
		btnSpolocnostName.setBackground(new Color(255, 255, 255));
		btnSpolocnostName.setFont(new Font("Segoe UI", Font.BOLD, fontBig));
		panelSpolocnost.add(btnSpolocnostName);

		panelTexty = new JPanel(); 
		panelTexty.setBorder(new EmptyBorder(0, 0, 10, 0));
		add(panelTexty);
		panelTexty.setLayout(new GridLayout(0, 2, 0, 0));

		panelPicture = new JPanel();
		panelPicture.setBackground(new Color(255, 255, 255));
		panelTexty.add(panelPicture);
		panelPicture.setLayout(new GridLayout(0, 1, 0, 0));

		panelPictureFrame = new JPanel();
		panelPictureFrame.setBorder(new EmptyBorder(2, 10, 10, 10));
		panelPicture.add(panelPictureFrame);
		panelPictureFrame.setLayout(new GridLayout(0, 1, 0, 0));

		lblPicture = new JLabel("Obrazok");
		panelPictureFrame.add(lblPicture);
		lblPicture.setForeground(new Color(0, 0, 0));
		lblPicture.setHorizontalAlignment(SwingConstants.CENTER);

		panelInfo = new JPanel();
		panelTexty.add(panelInfo);
		panelInfo.setLayout(new BorderLayout(0, 0));

		panelInfoPanel = new JPanel();
		panelInfoPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
		panelInfoPanel.setBackground(new Color(255, 255, 255));
		panelInfo.add(panelInfoPanel, BorderLayout.CENTER);
		panelInfoPanel.setLayout(new GridLayout(6, 1, 0, 0));

		panelMeno = new JPanel();
		panelMeno.setSize(new Dimension(0, 20));
		panelMeno.setPreferredSize(new Dimension(10, 20));
		panelMeno.setMinimumSize(new Dimension(10, 20));
		panelMeno.setMaximumSize(new Dimension(32767, 20));
		panelMeno.setForeground(new Color(0, 0, 0));
		panelMeno.setBackground(new Color(255, 255, 255));
		panelInfoPanel.add(panelMeno);
		panelMeno.setLayout(new GridLayout(0, 1, 0, 0));

		btnMeno = new JButton("Mgr. Meno Priezvisko PhD.");
		btnMeno.setHorizontalAlignment(SwingConstants.LEFT);
		btnMeno.setBorder(null);
		btnMeno.setForeground(new Color(0, 0, 0));
		btnMeno.setBackground(new Color(255, 255, 255));
		btnMeno.setMargin(new Insets(0, 0, 0, 0));
		btnMeno.setFont(new Font("Segoe UI", Font.PLAIN, fontSmall));
		panelMeno.add(btnMeno);

		panelTelC = new JPanel();
		panelTelC.setBorder(null);
		panelTelC.setBackground(new Color(255, 255, 255));
		panelInfoPanel.add(panelTelC);
		panelTelC.setLayout(new GridLayout(0, 1, 2, 0));

		btnTelCislo = new JButton("+421 949 556 939");
		btnTelCislo.setHorizontalAlignment(SwingConstants.LEFT);
		btnTelCislo.setBorder(null);
		btnTelCislo.setForeground(new Color(0, 0, 0));
		btnTelCislo.setBackground(new Color(255, 255, 255));
		btnTelCislo.setFont(new Font("Segoe UI", Font.PLAIN, fontSmall));
		panelTelC.add(btnTelCislo);

		panelEmail = new JPanel();
		panelEmail.setBackground(new Color(255, 255, 255));
		panelInfoPanel.add(panelEmail);
		panelEmail.setLayout(new GridLayout(0, 1, 2, 0));

		btnEmail = new JButton("email@gmail.com");
		btnEmail.setHorizontalAlignment(SwingConstants.LEFT);
		btnEmail.setForeground(Color.BLACK);
		btnEmail.setFont(new Font("Segoe UI", Font.PLAIN, fontSmall));
		btnEmail.setBorder(null);
		btnEmail.setBackground(Color.WHITE);
		panelEmail.add(btnEmail);

		panelWeb = new JPanel();
		panelWeb.setBackground(new Color(255, 255, 255));
		panelInfoPanel.add(panelWeb);
		panelWeb.setLayout(new GridLayout(0, 1, 2, 0));

		btnWeb = new JButton("webstranka.com");
		btnWeb.setHorizontalAlignment(SwingConstants.LEFT);
		btnWeb.setForeground(Color.BLACK);
		btnWeb.setFont(new Font("Segoe UI", Font.PLAIN, fontSmall));
		btnWeb.setBorder(null);
		btnWeb.setBackground(Color.WHITE);
		panelWeb.add(btnWeb);
		
		panelAdresa = new JPanel();
		panelAdresa.setBackground(Color.WHITE);
		panelInfoPanel.add(panelAdresa);
		panelAdresa.setLayout(new GridLayout(0, 1, 2, 0));
		
		btnAdresa = new JButton("Mostná 1");
		btnAdresa.setHorizontalAlignment(SwingConstants.LEFT);
		btnAdresa.setForeground(Color.BLACK);
		btnAdresa.setFont(new Font("Segoe UI", Font.PLAIN, fontSmall));
		btnAdresa.setBorder(null);
		btnAdresa.setBackground(Color.WHITE);
		panelAdresa.add(btnAdresa);
	}

}
package vizitkar;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Insets;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;

public class PanelType2 extends PanelVizitka {

	private static final long serialVersionUID = 1L;
	
	public PanelType2() {
		setPreferredSize(new Dimension(400, 278));
		setBackground(new Color(255, 255, 255));
		setMinimumSize(new Dimension(400, 278));
		setMaximumSize(new Dimension(400, 278));
		setLayout(new BorderLayout(0, 0));

		JPanel panelSpolocnost = new JPanel();
		panelSpolocnost.setBorder(null);
		add(panelSpolocnost, BorderLayout.NORTH);
		panelSpolocnost.setBackground(new Color(255, 255, 255));
		panelSpolocnost.setLayout(new GridLayout(0, 1, 0, 0));

		btnSpolocnostName = new JButton("Spoločnosť s.r.o.");
		btnSpolocnostName.setBorder(new EmptyBorder(10, 10, 10, 10));
		btnSpolocnostName.setMargin(new Insets(10, 14, 10, 14));
		btnSpolocnostName.setForeground(new Color(0, 0, 0));
		btnSpolocnostName.setBackground(new Color(255, 255, 255));
		btnSpolocnostName.setFont(new Font("Segoe UI", Font.BOLD, fontBig));
		panelSpolocnost.add(btnSpolocnostName);

		panelTexty = new JPanel();
		panelTexty.setBorder(new EmptyBorder(0, 0, 10, 0));
		add(panelTexty);
		panelTexty.setLayout(new GridLayout(0, 2, 0, 0));

		panelInfo = new JPanel();
		panelTexty.add(panelInfo);
		panelInfo.setLayout(new BorderLayout(0, 0));

		panelInfoPanel = new JPanel();
		panelInfoPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
		panelInfoPanel.setBackground(new Color(255, 255, 255));
		panelInfo.add(panelInfoPanel, BorderLayout.CENTER);
		panelInfoPanel.setLayout(new GridLayout(6, 1, 0, 0));

		panelMeno = new JPanel();
		panelMeno.setSize(new Dimension(0, 20));
		panelMeno.setPreferredSize(new Dimension(10, 20));
		panelMeno.setMinimumSize(new Dimension(10, 20));
		panelMeno.setMaximumSize(new Dimension(32767, 20));
		panelMeno.setForeground(new Color(0, 0, 0));
		panelMeno.setBackground(new Color(255, 255, 255));
		panelInfoPanel.add(panelMeno);
		panelMeno.setLayout(new GridLayout(0, 1, 0, 0));

		btnMeno = new JButton("Mgr. Meno Priezvisko PhD.");
		btnMeno.setHorizontalAlignment(SwingConstants.LEFT);
		btnMeno.setBorder(null);
		btnMeno.setForeground(new Color(0, 0, 0));
		btnMeno.setBackground(new Color(255, 255, 255));
		btnMeno.setMargin(new Insets(0, 0, 0, 0));
		btnMeno.setFont(new Font("Segoe UI", Font.PLAIN, fontSmall));
		panelMeno.add(btnMeno);

		panelTelC = new JPanel();
		panelTelC.setBorder(null);
		panelTelC.setBackground(new Color(255, 255, 255));
		panelInfoPanel.add(panelTelC);
		panelTelC.setLayout(new GridLayout(0, 1, 0, 0));

		btnTelCislo = new JButton("+421 949 556 939");
		btnTelCislo.setHorizontalAlignment(SwingConstants.LEFT);
		btnTelCislo.setBorder(null);
		btnTelCislo.setForeground(new Color(0, 0, 0));
		btnTelCislo.setBackground(new Color(255, 255, 255));
		btnTelCislo.setFont(new Font("Segoe UI", Font.PLAIN, fontSmall));
		panelTelC.add(btnTelCislo);

		panelEmail = new JPanel();
		panelEmail.setBackground(new Color(255, 255, 255));
		panelInfoPanel.add(panelEmail);
		panelEmail.setLayout(new GridLayout(0, 1, 0, 0));

		btnEmail = new JButton("email@gmail.com");
		btnEmail.setHorizontalAlignment(SwingConstants.LEFT);
		btnEmail.setForeground(Color.BLACK);
		btnEmail.setFont(new Font("Segoe UI", Font.PLAIN, fontSmall));
		btnEmail.setBorder(null);
		btnEmail.setBackground(Color.WHITE);
		panelEmail.add(btnEmail);

		panelWeb = new JPanel();
		panelWeb.setBackground(new Color(255, 255, 255));
		panelInfoPanel.add(panelWeb);
		panelWeb.setLayout(new GridLayout(0, 1, 0, 0));

		btnWeb = new JButton("webstranka.com");
		btnWeb.setHorizontalAlignment(SwingConstants.LEFT);
		btnWeb.setForeground(Color.BLACK);
		btnWeb.setFont(new Font("Segoe UI", Font.PLAIN, fontSmall));
		btnWeb.setBorder(null);
		btnWeb.setBackground(Color.WHITE);
		panelWeb.add(btnWeb);
		
		panelAdresa = new JPanel();
		panelAdresa.setBackground(Color.WHITE);
		panelInfoPanel.add(panelAdresa);
		panelAdresa.setLayout(new GridLayout(0, 1, 2, 0));
		
		btnAdresa = new JButton("Mostná 1");
		btnAdresa.setHorizontalAlignment(SwingConstants.LEFT);
		btnAdresa.setForeground(Color.BLACK);
		btnAdresa.setFont(new Font("Segoe UI", Font.PLAIN, 15));
		btnAdresa.setBorder(null);
		btnAdresa.setBackground(Color.WHITE);
		panelAdresa.add(btnAdresa);

		panelPicture = new JPanel();
		panelPicture.setBackground(new Color(255, 255, 255));
		panelTexty.add(panelPicture);
		panelPicture.setLayout(new GridLayout(0, 1, 0, 0));

		panelPictureFrame = new JPanel();
		panelPictureFrame.setBorder(new EmptyBorder(10, 10, 10, 10));
		panelPicture.add(panelPictureFrame);
		panelPictureFrame.setLayout(new GridLayout(0, 1, 0, 0));

		lblPicture = new JLabel("Obrazok");
		panelPictureFrame.add(lblPicture);
		lblPicture.setForeground(new Color(0, 0, 0));
		lblPicture.setHorizontalAlignment(SwingConstants.CENTER);

	}

}
package vizitkar;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Insets;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;

public class PanelType3 extends PanelVizitka {

	private static final long serialVersionUID = 1L;

	/**
	 * Create the panel.
	 */
	public PanelType3() {
		setPreferredSize(new Dimension(400, 278));
		setBackground(new Color(255, 255, 255));
		setMinimumSize(new Dimension(400, 278));
		setMaximumSize(new Dimension(400, 278));
		setLayout(new BorderLayout(0, 0));

		panelSpolocnost = new JPanel();
		panelSpolocnost.setBorder(null);
		add(panelSpolocnost, BorderLayout.SOUTH);
		panelSpolocnost.setBackground(new Color(255, 255, 255));
		panelSpolocnost.setLayout(new GridLayout(0, 1, 0, 0));

		btnSpolocnostName = new JButton("Spoločnosť s.r.o.");
		btnSpolocnostName.setBorder(new EmptyBorder(10, 10, 30, 10));
		btnSpolocnostName.setMargin(new Insets(10, 14, 10, 14));
		btnSpolocnostName.setForeground(new Color(0, 0, 0));
		btnSpolocnostName.setBackground(new Color(255, 255, 255));
		btnSpolocnostName.setFont(new Font("Segoe UI", Font.BOLD, fontBig));
		panelSpolocnost.add(btnSpolocnostName);

		panelTexty = new JPanel();
		add(panelTexty);
		panelTexty.setLayout(new GridLayout(0, 2, 0, 0));

		panelPicture = new JPanel();
		panelPicture.setBackground(new Color(255, 255, 255));
		panelTexty.add(panelPicture);
		panelPicture.setLayout(new GridLayout(0, 1, 0, 0));

		panelPictureFrame = new JPanel();
		panelPictureFrame.setBorder(new EmptyBorder(10, 10, 10, 10));
		panelPicture.add(panelPictureFrame);
		panelPictureFrame.setLayout(new GridLayout(0, 1, 0, 0));

		lblPicture = new JLabel("Obrazok");
		panelPictureFrame.add(lblPicture);
		lblPicture.setForeground(new Color(0, 0, 0));
		lblPicture.setHorizontalAlignment(SwingConstants.CENTER);

		panelInfo = new JPanel();
		panelTexty.add(panelInfo);
		panelInfo.setLayout(new BorderLayout(0, 0));

		panelInfoPanel = new JPanel();
		panelInfoPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
		panelInfoPanel.setBackground(new Color(255, 255, 255));
		panelInfo.add(panelInfoPanel, BorderLayout.CENTER);
		panelInfoPanel.setLayout(new GridLayout(5, 1, 0, 0));

		panelMeno = new JPanel();
		panelMeno.setSize(new Dimension(0, 20));
		panelMeno.setPreferredSize(new Dimension(10, 20));
		panelMeno.setMinimumSize(new Dimension(10, 20));
		panelMeno.setMaximumSize(new Dimension(32767, 20));
		panelMeno.setForeground(new Color(0, 0, 0));
		panelMeno.setBackground(new Color(255, 255, 255));
		panelInfoPanel.add(panelMeno);
		panelMeno.setLayout(new GridLayout(0, 1, 0, 0));

		btnMeno = new JButton("Mgr. Meno Priezvisko PhD.");
		btnMeno.setHorizontalAlignment(SwingConstants.LEFT);
		btnMeno.setBorder(null);
		btnMeno.setForeground(new Color(0, 0, 0));
		btnMeno.setBackground(new Color(255, 255, 255));
		btnMeno.setMargin(new Insets(0, 0, 0, 0));
		btnMeno.setFont(new Font("Segoe UI", Font.PLAIN, fontSmall));
		panelMeno.add(btnMeno);

		panelTelC = new JPanel();
		panelTelC.setBorder(null);
		panelTelC.setBackground(new Color(255, 255, 255));
		panelInfoPanel.add(panelTelC);
		panelTelC.setLayout(new GridLayout(0, 1, 2, 0));

		btnTelCislo = new JButton("+421 949 556 939");
		btnTelCislo.setHorizontalAlignment(SwingConstants.LEFT);
		btnTelCislo.setBorder(null);
		btnTelCislo.setForeground(new Color(0, 0, 0));
		btnTelCislo.setBackground(new Color(255, 255, 255));
		btnTelCislo.setFont(new Font("Segoe UI", Font.PLAIN, fontSmall));
		panelTelC.add(btnTelCislo);

		panelEmail = new JPanel();
		panelEmail.setBackground(new Color(255, 255, 255));
		panelInfoPanel.add(panelEmail);
		panelEmail.setLayout(new GridLayout(0, 1, 2, 0));

		btnEmail = new JButton("email@gmail.com");
		btnEmail.setHorizontalAlignment(SwingConstants.LEFT);
		btnEmail.setForeground(Color.BLACK);
		btnEmail.setFont(new Font("Segoe UI", Font.PLAIN, fontSmall));
		btnEmail.setBorder(null);
		btnEmail.setBackground(Color.WHITE);
		panelEmail.add(btnEmail);

		panelWeb = new JPanel();
		panelWeb.setBackground(new Color(255, 255, 255));
		panelInfoPanel.add(panelWeb);
		panelWeb.setLayout(new GridLayout(0, 1, 2, 0));

		btnWeb = new JButton("webstranka.com");
		btnWeb.setHorizontalAlignment(SwingConstants.LEFT);
		btnWeb.setForeground(Color.BLACK);
		btnWeb.setFont(new Font("Segoe UI", Font.PLAIN, fontSmall));
		btnWeb.setBorder(null);
		btnWeb.setBackground(Color.WHITE);
		panelWeb.add(btnWeb);
		
		panelAdresa = new JPanel();
		panelAdresa.setBackground(Color.WHITE);
		panelInfoPanel.add(panelAdresa);
		panelAdresa.setLayout(new GridLayout(0, 1, 2, 0));
		
		btnAdresa = new JButton("Mostná 1");
		btnAdresa.setHorizontalAlignment(SwingConstants.LEFT);
		btnAdresa.setForeground(Color.BLACK);
		btnAdresa.setFont(new Font("Segoe UI", Font.PLAIN, 15));
		btnAdresa.setBorder(null);
		btnAdresa.setBackground(Color.WHITE);
		panelAdresa.add(btnAdresa);
	}

}
package vizitkar;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class PanelVizitka extends JPanel {

	private static final long serialVersionUID = 1L;

	public JPanel panelTexty;
	public JPanel panelPicture;
	public JPanel panelInfo;
	public JLabel lblPicture;
	public JPanel panelMeno;
	public JPanel panelEmail;
	public JPanel panelTelC;
	public JPanel panelWeb;
	public JPanel panelInfoPanel;
	public JPanel panelAdresa;
	public JButton btnSpolocnostName;
	public JButton btnMeno;
	public JButton btnEmail;
	public JButton btnWeb;
	public JButton btnTelCislo;
	public JButton btnAdresa;
	public JPanel panelSpolocnost;
	public int fontBig = 35;
	public int fontSmall = 15;
	public JPanel panelPictureFrame;

	public PanelVizitka() {

	}
	public JPanel getPanelAdresa() {
		return panelAdresa;
	}
	public void setPanelAdresa(JPanel panelAdresa) {
		this.panelAdresa = panelAdresa;
	}
	public JButton getBtnAdresa() {
		return btnAdresa;
	}
	public void setBtnAdresa(JButton btnAdresa) {
		this.btnAdresa = btnAdresa;
	}
	public int getFontBig() {
		return fontBig;
	} 

	public void setFontBig(int fontBig) {
		this.fontBig = fontBig;
	}

	public int getFontSmall() {
		return fontSmall;
	}

	public void setFontSmall(int fontSmall) {
		this.fontSmall = fontSmall;
	}

	public JPanel getPanelPictureFrame() {
		return panelPictureFrame;
	}

	public void setPanelPictureFrame(JPanel panelPictureFrame) {
		this.panelPictureFrame = panelPictureFrame;
	}

	public void setPanelSpolocnost(JPanel panelSpolocnost) {
		this.panelSpolocnost = panelSpolocnost;
	}
	public JPanel getPanelSpolocnost() {
		return panelSpolocnost;
	}

	public JButton getBtnSpolocnostName() {
		return btnSpolocnostName;
	}

	public void setBtnSpolocnostName(JButton btnSpolocnostName) {
		this.btnSpolocnostName = btnSpolocnostName;
	}

	public JButton getBtnMeno() {
		return btnMeno;
	}

	public void setBtnMeno(JButton btnMeno) {
		this.btnMeno = btnMeno;
	}

	public JButton getBtnEmail() {
		return btnEmail;
	}

	public void setBtnEmail(JButton btnEmail) {
		this.btnEmail = btnEmail;
	}

	public JButton getBtnWeb() {
		return btnWeb;
	}

	public void setBtnWeb(JButton btnWeb) {
		this.btnWeb = btnWeb;
	}

	public JPanel getPanelTexty() {
		return panelTexty;
	}

	public void setPanelTexty(JPanel panelTexty) {
		this.panelTexty = panelTexty;
	}

	public JPanel getPanelPicture() {
		return panelPicture;
	}

	public void setPanelPicture(JPanel panelPicture) {
		this.panelPicture = panelPicture;
	}

	public JPanel getPanelInfo() {
		return panelInfo;
	}

	public void setPanelInfo(JPanel panelInfo) {
		this.panelInfo = panelInfo;
	}

	public JLabel getLblPicture() {
		return lblPicture;
	} 

	public void setLblPicture(JLabel lblPicture) {
		this.lblPicture = lblPicture;
	}

	public JPanel getPanelMeno() {
		return panelMeno;
	}

	public void setPanelMeno(JPanel panelMeno) {
		this.panelMeno = panelMeno;
	}

	public JPanel getPanelEmail() {
		return panelEmail;
	}

	public void setPanelEmail(JPanel panelEmail) {
		this.panelEmail = panelEmail;
	}

	public JPanel getPanelTelC() {
		return panelTelC;
	}

	public void setPanelTelC(JPanel panelTelC) {
		this.panelTelC = panelTelC;
	}

	public JPanel getPanelWeb() {
		return panelWeb;
	}

	public void setPanelWeb(JPanel panelWeb) {
		this.panelWeb = panelWeb;
	}

	public JPanel getPanelInfoPanel() {
		return panelInfoPanel;
	}

	public void setPanelInfoPanel(JPanel panelInfoPanel) {
		this.panelInfoPanel = panelInfoPanel;
	}

	public JButton getBtnTelCislo() {
		return btnTelCislo;
	}

	public void setBtnTelCislo(JButton btnTelCislo) {
		this.btnTelCislo = btnTelCislo;
	}
}
package vizitkar;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.EnumMap;
import java.util.Map;
/**
 * @author Crunchify.com
 * Simple QR Code Generator Example - Create QR codes for free.
 */
public class QRCodeGenerator {
	public static void main(String[] args) {
		try {
			createQR("https://feit.uniza.sk","QRCode.png",512, Color.BLACK, Color.WHITE);
		}catch(IOException e) {
			e.printStackTrace();
		}
	}
    public static void createQR(String myCodeText,String filePath, int size, Color bgColor, Color qrColor)throws IOException {
    	String crunchifyFileType = "png";
        File crunchifyFile = new File(filePath);
        try {
            Map<EncodeHintType, Object> crunchifyHintType = new EnumMap<EncodeHintType, Object>(EncodeHintType.class);
            crunchifyHintType.put(EncodeHintType.CHARACTER_SET, "UTF-8");
            crunchifyHintType.put(EncodeHintType.MARGIN, 1); /* default = 4 */
            Object put = crunchifyHintType.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);
            QRCodeWriter mYQRCodeWriter = new QRCodeWriter(); // throws com.google.zxing.WriterException
            BitMatrix crunchifyBitMatrix = mYQRCodeWriter.encode(myCodeText, BarcodeFormat.QR_CODE, size,
                    size, crunchifyHintType);
            int CrunchifyWidth = crunchifyBitMatrix.getWidth();
            BufferedImage crunchifyImage = new BufferedImage(CrunchifyWidth, CrunchifyWidth,
                    BufferedImage.TYPE_INT_RGB);
            crunchifyImage.createGraphics();
            Graphics2D crunchifyGraphics = (Graphics2D) crunchifyImage.getGraphics();
            crunchifyGraphics.setColor(bgColor);
            crunchifyGraphics.fillRect(0, 0, CrunchifyWidth, CrunchifyWidth);
            crunchifyGraphics.setColor(qrColor);
            for (int i = 0; i < CrunchifyWidth; i++) {
                for (int j = 0; j < CrunchifyWidth; j++) {
                    if (crunchifyBitMatrix.get(i, j)) {
                        crunchifyGraphics.fillRect(i, j, 1, 1);
                    }
                }
            }
            ImageIO.write(crunchifyImage, crunchifyFileType, crunchifyFile);
        } catch (WriterException e) {
            System.out.println("\nSorry.. Something went wrong...\n");
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
package vizitkar;

import java.awt.EventQueue;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import com.formdev.flatlaf.FlatDarkLaf;


import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;

import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import java.awt.FlowLayout;
import java.awt.Dimension;
import javax.swing.BoxLayout;
import java.awt.Cursor;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.border.TitledBorder;

public class Start extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private JPanel panelOptionsButtons;
	private JScrollPane scrollPane;
	private JPanel panelVizitky;

	private JButton btnVymazat;
	private JButton btnOtvor;
	private JTextField textField;
	private JButton btnNewButton;
	private JButton btnNovaVizitka;
	private JPanel panelLogoMain;
	private JLabel lblNewLabel_1;
	private JPanel panelOptions;
	private JPanel panelList;
	private JPanel panel_1;
	private JTextField txtNazovvizitky;
	private ArrayList<JPanel> listPanelovVizitiek = new ArrayList<JPanel>();
	private JPanel selectedVizitka;
	private JLabel lblNewLabel;
	private JComboBox comboBoxSort;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					UIManager.setLookAndFeel(new FlatDarkLaf());
					Start frame = new Start();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Vytvára hlavný frame
	 */
	public Start() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 863, 455);
		contentPane = new JPanel();
		contentPane.setBackground(new Color(48, 50, 52));
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(new BorderLayout(0, 0));

		panelOptions = new JPanel();
		panelOptions.setBackground(new Color(60, 63, 65));
		contentPane.add(panelOptions, BorderLayout.NORTH);
		panelOptions.setLayout(new BorderLayout(0, 1));

		panelLogoMain = new JPanel();
		panelLogoMain.setBorder(null);
		panelOptions.add(panelLogoMain, BorderLayout.NORTH);
		panelLogoMain.setBackground(new Color(36, 37, 38));
		panelLogoMain.setLayout(new GridLayout(0, 1, 0, 0));

		lblNewLabel_1 = new JLabel("Vizitky");
		lblNewLabel_1.setVerticalAlignment(SwingConstants.TOP);
		lblNewLabel_1.setBorder(new EmptyBorder(5, 10, 0, 0));
		lblNewLabel_1.setForeground(new Color(255, 255, 255));
		lblNewLabel_1.setHorizontalAlignment(SwingConstants.LEFT);
		lblNewLabel_1.setFont(new Font("Corbel Light", Font.PLAIN, 30));
		lblNewLabel_1.setBackground(new Color(133, 166, 192));
		panelLogoMain.add(lblNewLabel_1);

		panelOptionsButtons = new JPanel();
		panelOptionsButtons.setBorder(new EmptyBorder(10, 0, 4, 0));
		panelOptionsButtons.setBackground(new Color(36, 37, 38));
		panelOptions.add(panelOptionsButtons, BorderLayout.SOUTH);
		panelOptionsButtons.setForeground(new Color(0, 0, 0));

		btnVymazat = new JButton("Vymazať");
		btnVymazat.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					for (Component comp : selectedVizitka.getComponents()) {
						if (comp instanceof JTextField) {
							JTextField textField = (JTextField) comp;
							String str = textField.getText();
							int option = JOptionPane.showConfirmDialog(null, "Určite chcete vymazať tento súbor?",
									"Súbor " + str, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

							if (option == JOptionPane.YES_OPTION) {
								vymazanieDat(str);
							}
						}
					}
				} catch (Exception e2) {
					JOptionPane.showMessageDialog(null, "Nebol vybratý súbor ", "Error", JOptionPane.ERROR_MESSAGE);
				}

			}
		});
		panelOptionsButtons.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 0));

		btnNovaVizitka = new JButton("Nová vizitka");
		btnNovaVizitka.setBackground(new Color(0, 64, 128));
		btnNovaVizitka.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				App app = new App();
				app.setVisible(true);
				dispose();
			}
		});
		
		lblNewLabel = new JLabel("Zoradiť podľa:");
		panelOptionsButtons.add(lblNewLabel);
		
		comboBoxSort = new JComboBox();
		comboBoxSort.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				nacitanieDat(comboBoxSort.getSelectedIndex());
			}
		});
		comboBoxSort.setModel(new DefaultComboBoxModel(new String[] {"najstaršie", "najnovšie", "A-Z", "Z-A"}));
		comboBoxSort.setSelectedIndex(0);
		panelOptionsButtons.add(comboBoxSort);
		panelOptionsButtons.add(btnNovaVizitka);
		panelOptionsButtons.add(btnVymazat);
		btnOtvor = new JButton("Otvoriť");
		btnOtvor.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					for (Component comp : selectedVizitka.getComponents()) {
						if (comp instanceof JTextField) {
							JTextField textField = (JTextField) comp;
							String str = textField.getText();
							prehladavanieDat(str);
						}
					}
				} catch (Exception e2) {
					JOptionPane.showMessageDialog(null, "Nebol vybratý súbor ", "Error", JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		panelOptionsButtons.add(btnOtvor);

		panelList = new JPanel();
		contentPane.add(panelList, BorderLayout.CENTER);
		panelList.setLayout(new GridLayout(0, 1, 0, 0));

		scrollPane = new JScrollPane();
		scrollPane.setBorder(null);
		panelList.add(scrollPane);

		panelVizitky = new JPanel();
		panelVizitky.setBackground(new Color(36, 37, 38));
		scrollPane.setViewportView(panelVizitky);
		panelVizitky.setLayout(new GridLayout(20, 1, 0, 2));
		nacitanieDat(0);
		

	}
	/** 
	 * Táto metóda slúži na načítanie dát zo súboru Data.csv a následne ukáže TextField-y s už vytvorenými vizitkami
	 * 
	 * @param int cislo - slúži na sortovanie súborov
	 * 
	 * */
	private boolean nacitanieDat(int cislo) {
	    String filePath = "Data.csv";
	    File file = new File(filePath);
	    if (!file.exists()) {
	        System.out.println("File does not exist.");
	        return true;
	    }

	    List<String[]> records = new ArrayList<>();
	    try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
	        String line;
	        boolean firstLine = true;

	        while ((line = reader.readLine()) != null) {
	            if (firstLine) {
	                firstLine = false;
	                continue;
	            }
	            String[] data = line.split(",");
	            if (data.length >= 3) {
	                records.add(data);
	            } else {
	                System.err.println("Skipping invalid line: " + line);
	            }
	        }
	    } catch (IOException e) {
	        System.err.println("Error reading from CSV file: " + e.getMessage());
	        return true;
	    }

	    switch (cislo) {
	        case 0:
	            break;
	        case 1:
	            Collections.reverse(records);
	            break;
	        case 2:
	            records.sort(Comparator.comparing(record -> record[1]));
	            break;
	        case 3:
	            records.sort(Comparator.comparing(record -> record[1], Comparator.reverseOrder()));
	            break;
	    }

	    if (panelVizitky == null) {
	        return true;
	    }

	    panelVizitky.removeAll();
	    listPanelovVizitiek.clear();

	    for (String[] record : records) {
	        String nazov = record[1];

	        JPanel panel = new JPanel();
	        panel.setBackground(new Color(60, 63, 65));
	        panel.addMouseListener(new MouseAdapter() {
	            @Override
	            public void mouseClicked(MouseEvent e) {
	                Color color = new Color(60, 63, 65);
	                if (panel.getBackground().equals(color)) {
	                    unselectedVizitka();
	                    setSelectedVizitka(panel);
	                    panel.setBackground(new Color(48, 50, 52));
	                } else {
	                    unselectedVizitka();
	                    setSelectedVizitka(panel);
	                    panel.setBackground(new Color(60, 63, 65));
	                }
	            }
	        });
	        panel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
	        panel.setAlignmentX(FlowLayout.LEFT);
	        panelVizitky.add(panel);
	        listPanelovVizitiek.add(panel);
	        panel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));

	        JTextField txtNazovvizitky = new JTextField();
	        txtNazovvizitky.setBorder(new EmptyBorder(0, 10, 0, 0));
	        txtNazovvizitky.setHorizontalAlignment(SwingConstants.LEFT);
	        txtNazovvizitky.setForeground(new Color(255, 255, 255));
	        txtNazovvizitky.setDisabledTextColor(new Color(255, 255, 255));
	        txtNazovvizitky.setEditable(false);
	        txtNazovvizitky.setEnabled(false);
	        txtNazovvizitky.setText(nazov);
	        panel.add(txtNazovvizitky);
	        txtNazovvizitky.setColumns(10);

	        validate();
	        repaint();
	    }

	    return true;
	}


	public void setSelectedVizitka(JPanel panel) {
		this.selectedVizitka = panel;
	}
	
	public void unselectedVizitka() {
		Color color = new Color(48, 50, 52);
		for (JPanel x : listPanelovVizitiek) {
			if (x.getBackground().equals(color)) {
				setSelectedVizitka(null);
				x.setBackground(new Color(60, 63, 65));
			}
		}
	}
	/**
	 * Táto metóda slúži na prehľadávanie dát vybranej vizitky, vybraná vizitka sa spustí v triede App na jej ďalšie spracovanie
	 * 
	 * @param selectedNazov názov vizitky
	 * 
	 * 
	 * */
	public void prehladavanieDat(String selectedNazov) {
		String filePathData = "Data.csv";
		String filePath = "";

		try (BufferedReader readerData = new BufferedReader(new FileReader(filePathData))) {
			String lineData;
			boolean firstLineData = true;

			while ((lineData = readerData.readLine()) != null) {
				if (firstLineData) {
					firstLineData = false;
					continue;
				}

				String[] data = lineData.split(",", -1);
				if (data[1].equals(selectedNazov)) {
					filePath = data[2];
					break;
				}
			}
		} catch (IOException e) {
			System.err.println("Error reading from Data.csv: " + e.getMessage());
			return;
		}

		if (filePath.isEmpty()) {
			System.out.println("No CSV file path found for the selected Vizitka.");
			return;
		}

		Vizitka vizitka = new Vizitka();

		try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
			String line;
			boolean firstLine = true;

			while ((line = reader.readLine()) != null) {
				if (firstLine) {
					firstLine = false;
					continue;
				}

				String[] data = line.split("_", -1);
				int id = Integer.parseInt(data[0]);

				switch (id) {
				case 0:
					vizitka.setMeno(data[2]);
					vizitka.setPriezvisko(data[3]);
					vizitka.setTitulPred(data[4]);
					vizitka.setTitulZa(data[5]);
					vizitka.setSpolocnost(data[6]);
					vizitka.setTelCislo(data[7]);
					vizitka.setEmail(data[8]);
					vizitka.setWeb(data[9]);
					vizitka.setAdresa(data[10]);
					break;

				case 1:
					vizitka.setMenoColor(decodeColor(data[2]));
					vizitka.setSpolocnostColor(decodeColor(data[3]));
					vizitka.setTelCisloColor(decodeColor(data[4]));
					vizitka.setEmailColor(decodeColor(data[5]));
					vizitka.setWebColor(decodeColor(data[6]));
					vizitka.setAdresaColor(decodeColor(data[7]));
					break;
				case 2:
					vizitka.setMenoAlign(data[2]);
					vizitka.setSpolocnostAlign(data[3]);
					vizitka.setTelCisloAlign(data[4]);
					vizitka.setEmailAlign(data[5]);
					vizitka.setWebAlign(data[6]);
					vizitka.setAdresaAlign(data[7]);
					break;
				case 3:
					vizitka.setMenoFont(data[2]);
					vizitka.setSpolocnostFont(data[3]);
					vizitka.setTelCisloFont(data[4]);
					vizitka.setEmailFont(data[5]);
					vizitka.setWebFont(data[6]);
					vizitka.setAdresaFont(data[7]);
					break;
				case 4:
					vizitka.setColorBG(decodeColor(data[2]));
					break;
				case 5:
					vizitka.setPomer(data[2]);
					break;
				case 6:
					vizitka.setPanelType(data[2]);
					break;
				case 7:
					vizitka.setLogoORqr(data[2]);
					if (vizitka.getLogoORqr().equals("1")) {
						vizitka.setLogoPath(data[3]);
						break;
					} else if (vizitka.getLogoORqr().equals("2")) {
						vizitka.setQrColor(decodeColor(data[3]));
						break;
					}

				}
			}
		} catch (IOException e) {
			System.err.println("Error reading from the CSV file: " + e.getMessage());
			return;
		}
		App app = new App(vizitka);

		app.setVisible(true);
		app.setOpened(true);
		app.setOpenedVizitkaNazov(selectedNazov);

		Start.this.dispose();
	}
	/**
	 * Táto metóda slúži na prepísanie farby z dát (pretože mi inak nebralo danú farbu)
	 * 
	 * @param colorString reťazec danej farby, ktorú chceme prepísať na Color
	 * @return vracia prepísanú farbu
	 * 
	 * */
	private Color decodeColor(String colorString) {
		try {
			if (colorString==null) {
				return new Color(255,255,255);
			}
			Pattern pattern = Pattern.compile("java.awt.Color\\[r=(\\d+),g=(\\d+),b=(\\d+)\\]");
			Matcher matcher = pattern.matcher(colorString);

			if (matcher.find()) {
				int r = Integer.parseInt(matcher.group(1));
				int g = Integer.parseInt(matcher.group(2));
				int b = Integer.parseInt(matcher.group(3));
				return new Color(r, g, b);
			}
		} catch (Exception e) {
			System.err.println("Error decoding color: " + colorString + " - " + e.getMessage());
		}

		return Color.BLACK; 
	}
	/**
	 * Metóda na vymazávanie dát (vymaže aj daný súbor v počítači aj v Data.csv)
	 * 
	 * @param selectedNazov názov vizitky, ktorú chceme vymazať
	 * 
	 * */
	public void vymazanieDat(String selectedNazov) {
	    String filePath = "Data.csv";
	    File dataFile = new File(filePath);
	    ArrayList<String> lines = new ArrayList<>();
	    String fileToDeletePath = "";
	    String header = "";

	    try (BufferedReader reader = new BufferedReader(new FileReader(dataFile))) {
	        boolean isFirstLine = true;

	        String line;
	        while ((line = reader.readLine()) != null) {
	            if (isFirstLine) {
	                header = line;
	                lines.add(header);
	                isFirstLine = false;
	                continue;
	            }

	            String[] data = line.split(",");
	            if (data[1].equals(selectedNazov)) {
	                fileToDeletePath = data[2];
	            } else {
	                lines.add(line);
	            }
	        }
	    } catch (IOException e) {
	        System.err.println("Error reading from CSV file: " + e.getMessage());
	        return;
	    }

	    if (!fileToDeletePath.isEmpty()) {
	        File fileToDelete = new File(fileToDeletePath);
	        if (fileToDelete.exists()) {
	            if (!fileToDelete.delete()) {
	                System.err.println("Error deleting the file: " + fileToDeletePath);
	            }
	        }
	    }

	    try (PrintWriter writer = new PrintWriter(new FileWriter(dataFile))) {
	        for (String line : lines) {
	            writer.println(line);
	        }
	    } catch (IOException e) {
	        System.err.println("Error writing to CSV file: " + e.getMessage());
	    }

	    setVisible(false);
	    contentPane.setVisible(false);

	    Start newStart = new Start();
	    newStart.setVisible(true);
	}



	
	

}

package vizitkar;

import java.awt.Color;

public class Vizitka {
	private int id;
	private String meno;
	private String priezvisko;
	private String titulPred;
	private String titulZa;
	private String spolocnost;
	private String adresa;
	private String telCislo;
	private String email;
	private String web;
	
    private Color menoColor;
    private Color spolocnostColor;
    private Color adresaColor;
    private Color telCisloColor;
    private Color emailColor;
    private Color webColor;

    
	private String menoAlign;
    private String spolocnostAlign;
    private String adresaAlign;
    private String telCisloAlign;
    private String emailAlign;
    private String webAlign;
    
    private String menoFont;
    private String spolocnostFont;
    private String adresaFont;
    private String telCisloFont;
    private String emailFont;
    private String webFont;
    
	private Color colorBG;
	private String pomer;
	private String panelType;
	
	private String logoORqr;
	private String logoPath;
	private String qrPath;
	private Color qrColor;
	
	
	public Vizitka() {
		this.id = 0;
		this.meno = "Jožko";
		this.priezvisko = "Mrkvička";
		this.titulPred = "Ing.";
		this.titulZa = "PhD.";
		this.spolocnost = "Naradie s.r.o.";
		this.adresa="Mostná 1";
		this.telCislo = "+421 949 123 456";
		this.email = "mrkvicka@gmail.com";
		this.web = "naradieMrkvicky.com";
		
		this.menoColor = new Color(0,0,0);
	    this.spolocnostColor = new Color(0,0,0);
	    this.adresaColor = new Color(0,0,0);
	    this.telCisloColor = new Color(0,0,0);
	    this.emailColor = new Color(0,0,0);
	    this.webColor = new Color(0,0,0);
	    
	    this.menoAlign = "0";
	    this.spolocnostAlign = "0";
	    this.adresaAlign = "0";
	    this.telCisloAlign = "0";
	    this.emailAlign = "0";
	    this.webAlign = "0";
	    
	    this.menoFont = "4";
	    this.spolocnostFont = "4";
	    this.adresaFont = "4";
	    this.telCisloFont = "4";
	    this.emailFont = "4";
	    this.webFont = "4";
	    
	    this.colorBG=null;
	    this.pomer="0";
		this.panelType="1";
		this.logoORqr="0";
	} 
	public String getMenoFont() {
		return menoFont;
	}
	public void setMenoFont(String menoFont) {
		this.menoFont = menoFont;
	}
	public String getSpolocnostFont() {
		return spolocnostFont;
	}
	public void setSpolocnostFont(String spolocnostFont) {
		this.spolocnostFont = spolocnostFont;
	}
	public String getAdresaFont() {
		return adresaFont;
	}
	public void setAdresaFont(String adresaFont) {
		this.adresaFont = adresaFont;
	}
	public String getTelCisloFont() {
		return telCisloFont;
	}
	public void setTelCisloFont(String telCisloFont) {
		this.telCisloFont = telCisloFont;
	}
	public String getEmailFont() {
		return emailFont;
	}
	public void setEmailFont(String emailFont) {
		this.emailFont = emailFont;
	}
	public String getWebFont() {
		return webFont;
	}
	public void setWebFont(String webFont) {
		this.webFont = webFont;
	}
	public void setColors(Color menoColor, Color priezviskoColor, Color titulPredColor, Color titulZaColor, Color spolocnostColor, Color adresaColor, Color telCisloColor, Color emailColor, Color webColor) {
	    this.menoColor = menoColor;
	    this.spolocnostColor = spolocnostColor;
	    this.adresaColor = adresaColor;
	    this.telCisloColor = telCisloColor;
	    this.emailColor = emailColor;
	    this.webColor = webColor;
	}
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getMeno() {
		return meno;
	}

	public void setMeno(String meno) {
		this.meno = meno;
	}

	public String getPriezvisko() {
		return priezvisko;
	}

	public void setPriezvisko(String priezvisko) {
		this.priezvisko = priezvisko;
	}

	public String getTitulPred() {
		return titulPred;
	}

	public void setTitulPred(String titulPred) {
		this.titulPred = titulPred;
	}

	public String getTitulZa() {
		return titulZa;
	}

	public void setTitulZa(String titulZa) {
		this.titulZa = titulZa;
	}

	public String getSpolocnost() {
		return spolocnost;
	}

	public void setSpolocnost(String spolocnost) {
		this.spolocnost = spolocnost;
	}

	public String getTelCislo() {
		return telCislo;
	}

	public void setTelCislo(String telCislo) {
		this.telCislo = telCislo;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getWeb() {
		return web;
	}

	public void setWeb(String web) {
		this.web = web;
	}


	public String getAdresa() {
		return adresa;
	}

	public void setAdresa(String adresa) {
		this.adresa = adresa;
	}

	public Color getMenoColor() {
		return menoColor;
	}
	public void setMenoColor(Color menoColor) {
		this.menoColor = menoColor;
	}
	
	public Color getSpolocnostColor() {
		return spolocnostColor;
	}
	public void setSpolocnostColor(Color spolocnostColor) {
		this.spolocnostColor = spolocnostColor;
	}
	public Color getAdresaColor() {
		return adresaColor;
	} 
	public void setAdresaColor(Color adresaColor) {
		this.adresaColor = adresaColor;
	}
	public Color getTelCisloColor() {
		return telCisloColor;
	}
	public void setTelCisloColor(Color telCisloColor) {
		this.telCisloColor = telCisloColor;
	}
	public Color getEmailColor() {
		return emailColor;
	}
	public void setEmailColor(Color emailColor) {
		this.emailColor = emailColor;
	}
	public Color getWebColor() {
		return webColor;
	}
	public void setWebColor(Color webColor) {
		this.webColor = webColor;
	}
	public Color getColorBG() {
		return colorBG;
	}
	public void setColorBG(Color colorBG) {
		this.colorBG = colorBG;
	}
	public String getMenoAlign() {
		return menoAlign;
	}
	public void setMenoAlign(String menoAlign) {
		this.menoAlign = menoAlign;
	}
	public String getSpolocnostAlign() {
		return spolocnostAlign;
	}
	public void setSpolocnostAlign(String spolocnostAlign) {
		this.spolocnostAlign = spolocnostAlign;
	}
	public String getAdresaAlign() {
		return adresaAlign;
	}
	public void setAdresaAlign(String adresaAlign) {
		this.adresaAlign = adresaAlign;
	}
	public String getTelCisloAlign() {
		return telCisloAlign;
	}
	public void setTelCisloAlign(String telCisloAlign) {
		this.telCisloAlign = telCisloAlign;
	}
	public String getEmailAlign() {
		return emailAlign;
	}
	public void setEmailAlign(String emailAlign) {
		this.emailAlign = emailAlign;
	}
	public String getWebAlign() {
		return webAlign;
	}
	public void setWebAlign(String webAlign) {
		this.webAlign = webAlign;
	}
	public String getPomer() {
		return pomer;
	}
	public void setPomer(String pomer) {
		this.pomer = pomer;
	}
	public String getPanelType() {
		return panelType;
	}
	public void setPanelType(String panelType) {
		this.panelType = panelType;
	}
	public String getLogoORqr() {
		return logoORqr;
	}
	public void setLogoORqr(String logoORqr) {
		this.logoORqr = logoORqr;
	}
	public String getLogoPath() {
		return logoPath;
	}
	public void setLogoPath(String logoPath) {
		this.logoPath = logoPath;
	}
	public String getQrPath() {
		return qrPath;
	}
	public void setQrPath(String qrPath) {
		this.qrPath = qrPath;
	}

	public Color getQrColor() {
		return qrColor;
	}
	public void setQrColor(Color qrColor) {
		this.qrColor = qrColor;
	}
}
